// Code generated by ent, DO NOT EDIT.

package animaltype

const (
	// Label holds the string label denoting the animaltype type in the database.
	Label = "animal_type"
	// FieldAnimalID holds the string denoting the animal_id field in the database.
	FieldAnimalID = "animal_id"
	// FieldTypeID holds the string denoting the type_id field in the database.
	FieldTypeID = "type_id"
	// EdgeAnimals holds the string denoting the animals edge name in mutations.
	EdgeAnimals = "animals"
	// EdgeTypes holds the string denoting the types edge name in mutations.
	EdgeTypes = "types"
	// AnimalFieldID holds the string denoting the ID field of the Animal.
	AnimalFieldID = "id"
	// AnimalTagFieldID holds the string denoting the ID field of the AnimalTag.
	AnimalTagFieldID = "id"
	// Table holds the table name of the animaltype in the database.
	Table = "animal_types"
	// AnimalsTable is the table that holds the animals relation/edge.
	AnimalsTable = "animal_types"
	// AnimalsInverseTable is the table name for the Animal entity.
	// It exists in this package in order to avoid circular dependency with the "animal" package.
	AnimalsInverseTable = "animals"
	// AnimalsColumn is the table column denoting the animals relation/edge.
	AnimalsColumn = "animal_id"
	// TypesTable is the table that holds the types relation/edge.
	TypesTable = "animal_types"
	// TypesInverseTable is the table name for the AnimalTag entity.
	// It exists in this package in order to avoid circular dependency with the "animaltag" package.
	TypesInverseTable = "animal_tags"
	// TypesColumn is the table column denoting the types relation/edge.
	TypesColumn = "type_id"
)

// Columns holds all SQL columns for animaltype fields.
var Columns = []string{
	FieldAnimalID,
	FieldTypeID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
