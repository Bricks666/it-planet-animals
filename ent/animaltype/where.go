// Code generated by ent, DO NOT EDIT.

package animaltype

import (
	"animals/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// AnimalID applies equality check predicate on the "animal_id" field. It's identical to AnimalIDEQ.
func AnimalID(v uint64) predicate.AnimalType {
	return predicate.AnimalType(sql.FieldEQ(FieldAnimalID, v))
}

// TypeID applies equality check predicate on the "type_id" field. It's identical to TypeIDEQ.
func TypeID(v uint64) predicate.AnimalType {
	return predicate.AnimalType(sql.FieldEQ(FieldTypeID, v))
}

// AnimalIDEQ applies the EQ predicate on the "animal_id" field.
func AnimalIDEQ(v uint64) predicate.AnimalType {
	return predicate.AnimalType(sql.FieldEQ(FieldAnimalID, v))
}

// AnimalIDNEQ applies the NEQ predicate on the "animal_id" field.
func AnimalIDNEQ(v uint64) predicate.AnimalType {
	return predicate.AnimalType(sql.FieldNEQ(FieldAnimalID, v))
}

// AnimalIDIn applies the In predicate on the "animal_id" field.
func AnimalIDIn(vs ...uint64) predicate.AnimalType {
	return predicate.AnimalType(sql.FieldIn(FieldAnimalID, vs...))
}

// AnimalIDNotIn applies the NotIn predicate on the "animal_id" field.
func AnimalIDNotIn(vs ...uint64) predicate.AnimalType {
	return predicate.AnimalType(sql.FieldNotIn(FieldAnimalID, vs...))
}

// TypeIDEQ applies the EQ predicate on the "type_id" field.
func TypeIDEQ(v uint64) predicate.AnimalType {
	return predicate.AnimalType(sql.FieldEQ(FieldTypeID, v))
}

// TypeIDNEQ applies the NEQ predicate on the "type_id" field.
func TypeIDNEQ(v uint64) predicate.AnimalType {
	return predicate.AnimalType(sql.FieldNEQ(FieldTypeID, v))
}

// TypeIDIn applies the In predicate on the "type_id" field.
func TypeIDIn(vs ...uint64) predicate.AnimalType {
	return predicate.AnimalType(sql.FieldIn(FieldTypeID, vs...))
}

// TypeIDNotIn applies the NotIn predicate on the "type_id" field.
func TypeIDNotIn(vs ...uint64) predicate.AnimalType {
	return predicate.AnimalType(sql.FieldNotIn(FieldTypeID, vs...))
}

// HasAnimals applies the HasEdge predicate on the "animals" edge.
func HasAnimals() predicate.AnimalType {
	return predicate.AnimalType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, AnimalsColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, AnimalsTable, AnimalsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnimalsWith applies the HasEdge predicate on the "animals" edge with a given conditions (other predicates).
func HasAnimalsWith(preds ...predicate.Animal) predicate.AnimalType {
	return predicate.AnimalType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, AnimalsColumn),
			sqlgraph.To(AnimalsInverseTable, AnimalFieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AnimalsTable, AnimalsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTypes applies the HasEdge predicate on the "types" edge.
func HasTypes() predicate.AnimalType {
	return predicate.AnimalType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, TypesColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, TypesTable, TypesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTypesWith applies the HasEdge predicate on the "types" edge with a given conditions (other predicates).
func HasTypesWith(preds ...predicate.AnimalTag) predicate.AnimalType {
	return predicate.AnimalType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, TypesColumn),
			sqlgraph.To(TypesInverseTable, AnimalTagFieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TypesTable, TypesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AnimalType) predicate.AnimalType {
	return predicate.AnimalType(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AnimalType) predicate.AnimalType {
	return predicate.AnimalType(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AnimalType) predicate.AnimalType {
	return predicate.AnimalType(func(s *sql.Selector) {
		p(s.Not())
	})
}
