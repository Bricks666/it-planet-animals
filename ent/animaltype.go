// Code generated by ent, DO NOT EDIT.

package ent

import (
	"animals/ent/animaltype"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// AnimalType is the model entity for the AnimalType schema.
type AnimalType struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AnimalTypeQuery when eager-loading is set.
	Edges AnimalTypeEdges `json:"edges"`
}

// AnimalTypeEdges holds the relations/edges for other nodes in the graph.
type AnimalTypeEdges struct {
	// AnimalTagsTypes holds the value of the animal_tags_types edge.
	AnimalTagsTypes []*Animal `json:"animal_tags_types,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AnimalTagsTypesOrErr returns the AnimalTagsTypes value or an error if the edge
// was not loaded in eager-loading.
func (e AnimalTypeEdges) AnimalTagsTypesOrErr() ([]*Animal, error) {
	if e.loadedTypes[0] {
		return e.AnimalTagsTypes, nil
	}
	return nil, &NotLoadedError{edge: "animal_tags_types"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AnimalType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case animaltype.FieldID:
			values[i] = new(sql.NullInt64)
		case animaltype.FieldType:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AnimalType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AnimalType fields.
func (at *AnimalType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case animaltype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			at.ID = uint64(value.Int64)
		case animaltype.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				at.Type = value.String
			}
		}
	}
	return nil
}

// QueryAnimalTagsTypes queries the "animal_tags_types" edge of the AnimalType entity.
func (at *AnimalType) QueryAnimalTagsTypes() *AnimalQuery {
	return NewAnimalTypeClient(at.config).QueryAnimalTagsTypes(at)
}

// Update returns a builder for updating this AnimalType.
// Note that you need to call AnimalType.Unwrap() before calling this method if this AnimalType
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *AnimalType) Update() *AnimalTypeUpdateOne {
	return NewAnimalTypeClient(at.config).UpdateOne(at)
}

// Unwrap unwraps the AnimalType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (at *AnimalType) Unwrap() *AnimalType {
	_tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("ent: AnimalType is not a transactional entity")
	}
	at.config.driver = _tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *AnimalType) String() string {
	var builder strings.Builder
	builder.WriteString("AnimalType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", at.ID))
	builder.WriteString("type=")
	builder.WriteString(at.Type)
	builder.WriteByte(')')
	return builder.String()
}

// AnimalTypes is a parsable slice of AnimalType.
type AnimalTypes []*AnimalType
