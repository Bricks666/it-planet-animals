// Code generated by ent, DO NOT EDIT.

package ent

import (
	"animals/ent/animal"
	"animals/ent/location"
	"animals/ent/visitedlocation"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VisitedLocationCreate is the builder for creating a VisitedLocation entity.
type VisitedLocationCreate struct {
	config
	mutation *VisitedLocationMutation
	hooks    []Hook
}

// SetAnimalID sets the "animal_id" field.
func (vlc *VisitedLocationCreate) SetAnimalID(u uint64) *VisitedLocationCreate {
	vlc.mutation.SetAnimalID(u)
	return vlc
}

// SetLocationID sets the "location_id" field.
func (vlc *VisitedLocationCreate) SetLocationID(u uint64) *VisitedLocationCreate {
	vlc.mutation.SetLocationID(u)
	return vlc
}

// SetDateTimeOfVisitLocationPoint sets the "date_time_of_visit_location_point" field.
func (vlc *VisitedLocationCreate) SetDateTimeOfVisitLocationPoint(t time.Time) *VisitedLocationCreate {
	vlc.mutation.SetDateTimeOfVisitLocationPoint(t)
	return vlc
}

// SetNillableDateTimeOfVisitLocationPoint sets the "date_time_of_visit_location_point" field if the given value is not nil.
func (vlc *VisitedLocationCreate) SetNillableDateTimeOfVisitLocationPoint(t *time.Time) *VisitedLocationCreate {
	if t != nil {
		vlc.SetDateTimeOfVisitLocationPoint(*t)
	}
	return vlc
}

// SetID sets the "id" field.
func (vlc *VisitedLocationCreate) SetID(u uint64) *VisitedLocationCreate {
	vlc.mutation.SetID(u)
	return vlc
}

// SetAnimalsID sets the "animals" edge to the Animal entity by ID.
func (vlc *VisitedLocationCreate) SetAnimalsID(id uint64) *VisitedLocationCreate {
	vlc.mutation.SetAnimalsID(id)
	return vlc
}

// SetAnimals sets the "animals" edge to the Animal entity.
func (vlc *VisitedLocationCreate) SetAnimals(a *Animal) *VisitedLocationCreate {
	return vlc.SetAnimalsID(a.ID)
}

// SetLocationsID sets the "locations" edge to the Location entity by ID.
func (vlc *VisitedLocationCreate) SetLocationsID(id uint64) *VisitedLocationCreate {
	vlc.mutation.SetLocationsID(id)
	return vlc
}

// SetLocations sets the "locations" edge to the Location entity.
func (vlc *VisitedLocationCreate) SetLocations(l *Location) *VisitedLocationCreate {
	return vlc.SetLocationsID(l.ID)
}

// Mutation returns the VisitedLocationMutation object of the builder.
func (vlc *VisitedLocationCreate) Mutation() *VisitedLocationMutation {
	return vlc.mutation
}

// Save creates the VisitedLocation in the database.
func (vlc *VisitedLocationCreate) Save(ctx context.Context) (*VisitedLocation, error) {
	return withHooks[*VisitedLocation, VisitedLocationMutation](ctx, vlc.sqlSave, vlc.mutation, vlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vlc *VisitedLocationCreate) SaveX(ctx context.Context) *VisitedLocation {
	v, err := vlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vlc *VisitedLocationCreate) Exec(ctx context.Context) error {
	_, err := vlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vlc *VisitedLocationCreate) ExecX(ctx context.Context) {
	if err := vlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vlc *VisitedLocationCreate) check() error {
	if _, ok := vlc.mutation.AnimalID(); !ok {
		return &ValidationError{Name: "animal_id", err: errors.New(`ent: missing required field "VisitedLocation.animal_id"`)}
	}
	if _, ok := vlc.mutation.LocationID(); !ok {
		return &ValidationError{Name: "location_id", err: errors.New(`ent: missing required field "VisitedLocation.location_id"`)}
	}
	if v, ok := vlc.mutation.ID(); ok {
		if err := visitedlocation.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "VisitedLocation.id": %w`, err)}
		}
	}
	if _, ok := vlc.mutation.AnimalsID(); !ok {
		return &ValidationError{Name: "animals", err: errors.New(`ent: missing required edge "VisitedLocation.animals"`)}
	}
	if _, ok := vlc.mutation.LocationsID(); !ok {
		return &ValidationError{Name: "locations", err: errors.New(`ent: missing required edge "VisitedLocation.locations"`)}
	}
	return nil
}

func (vlc *VisitedLocationCreate) sqlSave(ctx context.Context) (*VisitedLocation, error) {
	if err := vlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	vlc.mutation.id = &_node.ID
	vlc.mutation.done = true
	return _node, nil
}

func (vlc *VisitedLocationCreate) createSpec() (*VisitedLocation, *sqlgraph.CreateSpec) {
	var (
		_node = &VisitedLocation{config: vlc.config}
		_spec = sqlgraph.NewCreateSpec(visitedlocation.Table, sqlgraph.NewFieldSpec(visitedlocation.FieldID, field.TypeUint64))
	)
	if id, ok := vlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vlc.mutation.DateTimeOfVisitLocationPoint(); ok {
		_spec.SetField(visitedlocation.FieldDateTimeOfVisitLocationPoint, field.TypeTime, value)
		_node.DateTimeOfVisitLocationPoint = value
	}
	if nodes := vlc.mutation.AnimalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   visitedlocation.AnimalsTable,
			Columns: []string{visitedlocation.AnimalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: animal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AnimalID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vlc.mutation.LocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   visitedlocation.LocationsTable,
			Columns: []string{visitedlocation.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: location.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.LocationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VisitedLocationCreateBulk is the builder for creating many VisitedLocation entities in bulk.
type VisitedLocationCreateBulk struct {
	config
	builders []*VisitedLocationCreate
}

// Save creates the VisitedLocation entities in the database.
func (vlcb *VisitedLocationCreateBulk) Save(ctx context.Context) ([]*VisitedLocation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vlcb.builders))
	nodes := make([]*VisitedLocation, len(vlcb.builders))
	mutators := make([]Mutator, len(vlcb.builders))
	for i := range vlcb.builders {
		func(i int, root context.Context) {
			builder := vlcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VisitedLocationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vlcb *VisitedLocationCreateBulk) SaveX(ctx context.Context) []*VisitedLocation {
	v, err := vlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vlcb *VisitedLocationCreateBulk) Exec(ctx context.Context) error {
	_, err := vlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vlcb *VisitedLocationCreateBulk) ExecX(ctx context.Context) {
	if err := vlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
