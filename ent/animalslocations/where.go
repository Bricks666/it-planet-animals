// Code generated by ent, DO NOT EDIT.

package animalslocations

import (
	"animals/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldLTE(FieldID, id))
}

// AnimalId applies equality check predicate on the "animalId" field. It's identical to AnimalIdEQ.
func AnimalId(v uint64) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldEQ(FieldAnimalId, v))
}

// LocationId applies equality check predicate on the "locationId" field. It's identical to LocationIdEQ.
func LocationId(v uint64) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldEQ(FieldLocationId, v))
}

// DateTimeOfVisitLocationPoint applies equality check predicate on the "dateTimeOfVisitLocationPoint" field. It's identical to DateTimeOfVisitLocationPointEQ.
func DateTimeOfVisitLocationPoint(v time.Time) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldEQ(FieldDateTimeOfVisitLocationPoint, v))
}

// AnimalIdEQ applies the EQ predicate on the "animalId" field.
func AnimalIdEQ(v uint64) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldEQ(FieldAnimalId, v))
}

// AnimalIdNEQ applies the NEQ predicate on the "animalId" field.
func AnimalIdNEQ(v uint64) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldNEQ(FieldAnimalId, v))
}

// AnimalIdIn applies the In predicate on the "animalId" field.
func AnimalIdIn(vs ...uint64) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldIn(FieldAnimalId, vs...))
}

// AnimalIdNotIn applies the NotIn predicate on the "animalId" field.
func AnimalIdNotIn(vs ...uint64) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldNotIn(FieldAnimalId, vs...))
}

// LocationIdEQ applies the EQ predicate on the "locationId" field.
func LocationIdEQ(v uint64) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldEQ(FieldLocationId, v))
}

// LocationIdNEQ applies the NEQ predicate on the "locationId" field.
func LocationIdNEQ(v uint64) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldNEQ(FieldLocationId, v))
}

// LocationIdIn applies the In predicate on the "locationId" field.
func LocationIdIn(vs ...uint64) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldIn(FieldLocationId, vs...))
}

// LocationIdNotIn applies the NotIn predicate on the "locationId" field.
func LocationIdNotIn(vs ...uint64) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldNotIn(FieldLocationId, vs...))
}

// DateTimeOfVisitLocationPointEQ applies the EQ predicate on the "dateTimeOfVisitLocationPoint" field.
func DateTimeOfVisitLocationPointEQ(v time.Time) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldEQ(FieldDateTimeOfVisitLocationPoint, v))
}

// DateTimeOfVisitLocationPointNEQ applies the NEQ predicate on the "dateTimeOfVisitLocationPoint" field.
func DateTimeOfVisitLocationPointNEQ(v time.Time) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldNEQ(FieldDateTimeOfVisitLocationPoint, v))
}

// DateTimeOfVisitLocationPointIn applies the In predicate on the "dateTimeOfVisitLocationPoint" field.
func DateTimeOfVisitLocationPointIn(vs ...time.Time) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldIn(FieldDateTimeOfVisitLocationPoint, vs...))
}

// DateTimeOfVisitLocationPointNotIn applies the NotIn predicate on the "dateTimeOfVisitLocationPoint" field.
func DateTimeOfVisitLocationPointNotIn(vs ...time.Time) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldNotIn(FieldDateTimeOfVisitLocationPoint, vs...))
}

// DateTimeOfVisitLocationPointGT applies the GT predicate on the "dateTimeOfVisitLocationPoint" field.
func DateTimeOfVisitLocationPointGT(v time.Time) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldGT(FieldDateTimeOfVisitLocationPoint, v))
}

// DateTimeOfVisitLocationPointGTE applies the GTE predicate on the "dateTimeOfVisitLocationPoint" field.
func DateTimeOfVisitLocationPointGTE(v time.Time) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldGTE(FieldDateTimeOfVisitLocationPoint, v))
}

// DateTimeOfVisitLocationPointLT applies the LT predicate on the "dateTimeOfVisitLocationPoint" field.
func DateTimeOfVisitLocationPointLT(v time.Time) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldLT(FieldDateTimeOfVisitLocationPoint, v))
}

// DateTimeOfVisitLocationPointLTE applies the LTE predicate on the "dateTimeOfVisitLocationPoint" field.
func DateTimeOfVisitLocationPointLTE(v time.Time) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(sql.FieldLTE(FieldDateTimeOfVisitLocationPoint, v))
}

// HasAnimalsLocationsAnimal applies the HasEdge predicate on the "animals_locations_animal" edge.
func HasAnimalsLocationsAnimal() predicate.AnimalsLocations {
	return predicate.AnimalsLocations(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AnimalsLocationsAnimalTable, AnimalsLocationsAnimalColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnimalsLocationsAnimalWith applies the HasEdge predicate on the "animals_locations_animal" edge with a given conditions (other predicates).
func HasAnimalsLocationsAnimalWith(preds ...predicate.Animal) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AnimalsLocationsAnimalInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AnimalsLocationsAnimalTable, AnimalsLocationsAnimalColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAnimalsLocationsLocation applies the HasEdge predicate on the "animals_locations_location" edge.
func HasAnimalsLocationsLocation() predicate.AnimalsLocations {
	return predicate.AnimalsLocations(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AnimalsLocationsLocationTable, AnimalsLocationsLocationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnimalsLocationsLocationWith applies the HasEdge predicate on the "animals_locations_location" edge with a given conditions (other predicates).
func HasAnimalsLocationsLocationWith(preds ...predicate.Location) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AnimalsLocationsLocationInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AnimalsLocationsLocationTable, AnimalsLocationsLocationColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AnimalsLocations) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AnimalsLocations) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AnimalsLocations) predicate.AnimalsLocations {
	return predicate.AnimalsLocations(func(s *sql.Selector) {
		p(s.Not())
	})
}
