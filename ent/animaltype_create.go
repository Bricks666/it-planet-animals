// Code generated by ent, DO NOT EDIT.

package ent

import (
	"animals/ent/animal"
	"animals/ent/animaltag"
	"animals/ent/animaltype"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AnimalTypeCreate is the builder for creating a AnimalType entity.
type AnimalTypeCreate struct {
	config
	mutation *AnimalTypeMutation
	hooks    []Hook
}

// SetAnimalID sets the "animal_id" field.
func (atc *AnimalTypeCreate) SetAnimalID(u uint64) *AnimalTypeCreate {
	atc.mutation.SetAnimalID(u)
	return atc
}

// SetTypeID sets the "type_id" field.
func (atc *AnimalTypeCreate) SetTypeID(u uint64) *AnimalTypeCreate {
	atc.mutation.SetTypeID(u)
	return atc
}

// SetAnimalsID sets the "animals" edge to the Animal entity by ID.
func (atc *AnimalTypeCreate) SetAnimalsID(id uint64) *AnimalTypeCreate {
	atc.mutation.SetAnimalsID(id)
	return atc
}

// SetAnimals sets the "animals" edge to the Animal entity.
func (atc *AnimalTypeCreate) SetAnimals(a *Animal) *AnimalTypeCreate {
	return atc.SetAnimalsID(a.ID)
}

// SetTypesID sets the "types" edge to the AnimalTag entity by ID.
func (atc *AnimalTypeCreate) SetTypesID(id uint64) *AnimalTypeCreate {
	atc.mutation.SetTypesID(id)
	return atc
}

// SetTypes sets the "types" edge to the AnimalTag entity.
func (atc *AnimalTypeCreate) SetTypes(a *AnimalTag) *AnimalTypeCreate {
	return atc.SetTypesID(a.ID)
}

// Mutation returns the AnimalTypeMutation object of the builder.
func (atc *AnimalTypeCreate) Mutation() *AnimalTypeMutation {
	return atc.mutation
}

// Save creates the AnimalType in the database.
func (atc *AnimalTypeCreate) Save(ctx context.Context) (*AnimalType, error) {
	return withHooks[*AnimalType, AnimalTypeMutation](ctx, atc.sqlSave, atc.mutation, atc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (atc *AnimalTypeCreate) SaveX(ctx context.Context) *AnimalType {
	v, err := atc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atc *AnimalTypeCreate) Exec(ctx context.Context) error {
	_, err := atc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atc *AnimalTypeCreate) ExecX(ctx context.Context) {
	if err := atc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atc *AnimalTypeCreate) check() error {
	if _, ok := atc.mutation.AnimalID(); !ok {
		return &ValidationError{Name: "animal_id", err: errors.New(`ent: missing required field "AnimalType.animal_id"`)}
	}
	if _, ok := atc.mutation.TypeID(); !ok {
		return &ValidationError{Name: "type_id", err: errors.New(`ent: missing required field "AnimalType.type_id"`)}
	}
	if _, ok := atc.mutation.AnimalsID(); !ok {
		return &ValidationError{Name: "animals", err: errors.New(`ent: missing required edge "AnimalType.animals"`)}
	}
	if _, ok := atc.mutation.TypesID(); !ok {
		return &ValidationError{Name: "types", err: errors.New(`ent: missing required edge "AnimalType.types"`)}
	}
	return nil
}

func (atc *AnimalTypeCreate) sqlSave(ctx context.Context) (*AnimalType, error) {
	if err := atc.check(); err != nil {
		return nil, err
	}
	_node, _spec := atc.createSpec()
	if err := sqlgraph.CreateNode(ctx, atc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (atc *AnimalTypeCreate) createSpec() (*AnimalType, *sqlgraph.CreateSpec) {
	var (
		_node = &AnimalType{config: atc.config}
		_spec = sqlgraph.NewCreateSpec(animaltype.Table, nil)
	)
	if nodes := atc.mutation.AnimalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   animaltype.AnimalsTable,
			Columns: []string{animaltype.AnimalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: animal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AnimalID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.TypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   animaltype.TypesTable,
			Columns: []string{animaltype.TypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: animaltag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AnimalTypeCreateBulk is the builder for creating many AnimalType entities in bulk.
type AnimalTypeCreateBulk struct {
	config
	builders []*AnimalTypeCreate
}

// Save creates the AnimalType entities in the database.
func (atcb *AnimalTypeCreateBulk) Save(ctx context.Context) ([]*AnimalType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(atcb.builders))
	nodes := make([]*AnimalType, len(atcb.builders))
	mutators := make([]Mutator, len(atcb.builders))
	for i := range atcb.builders {
		func(i int, root context.Context) {
			builder := atcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AnimalTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, atcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, atcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, atcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (atcb *AnimalTypeCreateBulk) SaveX(ctx context.Context) []*AnimalType {
	v, err := atcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atcb *AnimalTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := atcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atcb *AnimalTypeCreateBulk) ExecX(ctx context.Context) {
	if err := atcb.Exec(ctx); err != nil {
		panic(err)
	}
}
