// Code generated by ent, DO NOT EDIT.

package ent

import (
	"animals/ent/animal"
	"animals/ent/animaltag"
	"animals/ent/location"
	"animals/ent/predicate"
	"animals/ent/user"
	"animals/ent/visitedlocation"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AnimalUpdate is the builder for updating Animal entities.
type AnimalUpdate struct {
	config
	hooks    []Hook
	mutation *AnimalMutation
}

// Where appends a list predicates to the AnimalUpdate builder.
func (au *AnimalUpdate) Where(ps ...predicate.Animal) *AnimalUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetWeight sets the "weight" field.
func (au *AnimalUpdate) SetWeight(f float32) *AnimalUpdate {
	au.mutation.ResetWeight()
	au.mutation.SetWeight(f)
	return au
}

// AddWeight adds f to the "weight" field.
func (au *AnimalUpdate) AddWeight(f float32) *AnimalUpdate {
	au.mutation.AddWeight(f)
	return au
}

// SetLength sets the "length" field.
func (au *AnimalUpdate) SetLength(f float32) *AnimalUpdate {
	au.mutation.ResetLength()
	au.mutation.SetLength(f)
	return au
}

// AddLength adds f to the "length" field.
func (au *AnimalUpdate) AddLength(f float32) *AnimalUpdate {
	au.mutation.AddLength(f)
	return au
}

// SetHeight sets the "height" field.
func (au *AnimalUpdate) SetHeight(f float32) *AnimalUpdate {
	au.mutation.ResetHeight()
	au.mutation.SetHeight(f)
	return au
}

// AddHeight adds f to the "height" field.
func (au *AnimalUpdate) AddHeight(f float32) *AnimalUpdate {
	au.mutation.AddHeight(f)
	return au
}

// SetGender sets the "gender" field.
func (au *AnimalUpdate) SetGender(a animal.Gender) *AnimalUpdate {
	au.mutation.SetGender(a)
	return au
}

// SetLifeStatus sets the "life_status" field.
func (au *AnimalUpdate) SetLifeStatus(as animal.LifeStatus) *AnimalUpdate {
	au.mutation.SetLifeStatus(as)
	return au
}

// SetNillableLifeStatus sets the "life_status" field if the given value is not nil.
func (au *AnimalUpdate) SetNillableLifeStatus(as *animal.LifeStatus) *AnimalUpdate {
	if as != nil {
		au.SetLifeStatus(*as)
	}
	return au
}

// SetChippingDateTime sets the "chipping_date_time" field.
func (au *AnimalUpdate) SetChippingDateTime(t time.Time) *AnimalUpdate {
	au.mutation.SetChippingDateTime(t)
	return au
}

// SetNillableChippingDateTime sets the "chipping_date_time" field if the given value is not nil.
func (au *AnimalUpdate) SetNillableChippingDateTime(t *time.Time) *AnimalUpdate {
	if t != nil {
		au.SetChippingDateTime(*t)
	}
	return au
}

// SetChipperID sets the "chipper_id" field.
func (au *AnimalUpdate) SetChipperID(u uint32) *AnimalUpdate {
	au.mutation.SetChipperID(u)
	return au
}

// SetNillableChipperID sets the "chipper_id" field if the given value is not nil.
func (au *AnimalUpdate) SetNillableChipperID(u *uint32) *AnimalUpdate {
	if u != nil {
		au.SetChipperID(*u)
	}
	return au
}

// ClearChipperID clears the value of the "chipper_id" field.
func (au *AnimalUpdate) ClearChipperID() *AnimalUpdate {
	au.mutation.ClearChipperID()
	return au
}

// SetChippingLocationID sets the "chipping_location_id" field.
func (au *AnimalUpdate) SetChippingLocationID(u uint64) *AnimalUpdate {
	au.mutation.SetChippingLocationID(u)
	return au
}

// SetNillableChippingLocationID sets the "chipping_location_id" field if the given value is not nil.
func (au *AnimalUpdate) SetNillableChippingLocationID(u *uint64) *AnimalUpdate {
	if u != nil {
		au.SetChippingLocationID(*u)
	}
	return au
}

// ClearChippingLocationID clears the value of the "chipping_location_id" field.
func (au *AnimalUpdate) ClearChippingLocationID() *AnimalUpdate {
	au.mutation.ClearChippingLocationID()
	return au
}

// SetDeathDateTime sets the "death_date_time" field.
func (au *AnimalUpdate) SetDeathDateTime(t time.Time) *AnimalUpdate {
	au.mutation.SetDeathDateTime(t)
	return au
}

// SetNillableDeathDateTime sets the "death_date_time" field if the given value is not nil.
func (au *AnimalUpdate) SetNillableDeathDateTime(t *time.Time) *AnimalUpdate {
	if t != nil {
		au.SetDeathDateTime(*t)
	}
	return au
}

// ClearDeathDateTime clears the value of the "death_date_time" field.
func (au *AnimalUpdate) ClearDeathDateTime() *AnimalUpdate {
	au.mutation.ClearDeathDateTime()
	return au
}

// SetChipper sets the "chipper" edge to the User entity.
func (au *AnimalUpdate) SetChipper(u *User) *AnimalUpdate {
	return au.SetChipperID(u.ID)
}

// AddTypeIDs adds the "types" edge to the AnimalTag entity by IDs.
func (au *AnimalUpdate) AddTypeIDs(ids ...uint64) *AnimalUpdate {
	au.mutation.AddTypeIDs(ids...)
	return au
}

// AddTypes adds the "types" edges to the AnimalTag entity.
func (au *AnimalUpdate) AddTypes(a ...*AnimalTag) *AnimalUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddTypeIDs(ids...)
}

// SetChippingLocation sets the "chipping_location" edge to the Location entity.
func (au *AnimalUpdate) SetChippingLocation(l *Location) *AnimalUpdate {
	return au.SetChippingLocationID(l.ID)
}

// AddLocationIDs adds the "locations" edge to the Location entity by IDs.
func (au *AnimalUpdate) AddLocationIDs(ids ...uint64) *AnimalUpdate {
	au.mutation.AddLocationIDs(ids...)
	return au
}

// AddLocations adds the "locations" edges to the Location entity.
func (au *AnimalUpdate) AddLocations(l ...*Location) *AnimalUpdate {
	ids := make([]uint64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return au.AddLocationIDs(ids...)
}

// AddVisitedLocationIDs adds the "visited_locations" edge to the VisitedLocation entity by IDs.
func (au *AnimalUpdate) AddVisitedLocationIDs(ids ...uint64) *AnimalUpdate {
	au.mutation.AddVisitedLocationIDs(ids...)
	return au
}

// AddVisitedLocations adds the "visited_locations" edges to the VisitedLocation entity.
func (au *AnimalUpdate) AddVisitedLocations(v ...*VisitedLocation) *AnimalUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return au.AddVisitedLocationIDs(ids...)
}

// Mutation returns the AnimalMutation object of the builder.
func (au *AnimalUpdate) Mutation() *AnimalMutation {
	return au.mutation
}

// ClearChipper clears the "chipper" edge to the User entity.
func (au *AnimalUpdate) ClearChipper() *AnimalUpdate {
	au.mutation.ClearChipper()
	return au
}

// ClearTypes clears all "types" edges to the AnimalTag entity.
func (au *AnimalUpdate) ClearTypes() *AnimalUpdate {
	au.mutation.ClearTypes()
	return au
}

// RemoveTypeIDs removes the "types" edge to AnimalTag entities by IDs.
func (au *AnimalUpdate) RemoveTypeIDs(ids ...uint64) *AnimalUpdate {
	au.mutation.RemoveTypeIDs(ids...)
	return au
}

// RemoveTypes removes "types" edges to AnimalTag entities.
func (au *AnimalUpdate) RemoveTypes(a ...*AnimalTag) *AnimalUpdate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveTypeIDs(ids...)
}

// ClearChippingLocation clears the "chipping_location" edge to the Location entity.
func (au *AnimalUpdate) ClearChippingLocation() *AnimalUpdate {
	au.mutation.ClearChippingLocation()
	return au
}

// ClearLocations clears all "locations" edges to the Location entity.
func (au *AnimalUpdate) ClearLocations() *AnimalUpdate {
	au.mutation.ClearLocations()
	return au
}

// RemoveLocationIDs removes the "locations" edge to Location entities by IDs.
func (au *AnimalUpdate) RemoveLocationIDs(ids ...uint64) *AnimalUpdate {
	au.mutation.RemoveLocationIDs(ids...)
	return au
}

// RemoveLocations removes "locations" edges to Location entities.
func (au *AnimalUpdate) RemoveLocations(l ...*Location) *AnimalUpdate {
	ids := make([]uint64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return au.RemoveLocationIDs(ids...)
}

// ClearVisitedLocations clears all "visited_locations" edges to the VisitedLocation entity.
func (au *AnimalUpdate) ClearVisitedLocations() *AnimalUpdate {
	au.mutation.ClearVisitedLocations()
	return au
}

// RemoveVisitedLocationIDs removes the "visited_locations" edge to VisitedLocation entities by IDs.
func (au *AnimalUpdate) RemoveVisitedLocationIDs(ids ...uint64) *AnimalUpdate {
	au.mutation.RemoveVisitedLocationIDs(ids...)
	return au
}

// RemoveVisitedLocations removes "visited_locations" edges to VisitedLocation entities.
func (au *AnimalUpdate) RemoveVisitedLocations(v ...*VisitedLocation) *AnimalUpdate {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return au.RemoveVisitedLocationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AnimalUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, AnimalMutation](ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AnimalUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AnimalUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AnimalUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AnimalUpdate) check() error {
	if v, ok := au.mutation.Weight(); ok {
		if err := animal.WeightValidator(v); err != nil {
			return &ValidationError{Name: "weight", err: fmt.Errorf(`ent: validator failed for field "Animal.weight": %w`, err)}
		}
	}
	if v, ok := au.mutation.Length(); ok {
		if err := animal.LengthValidator(v); err != nil {
			return &ValidationError{Name: "length", err: fmt.Errorf(`ent: validator failed for field "Animal.length": %w`, err)}
		}
	}
	if v, ok := au.mutation.Height(); ok {
		if err := animal.HeightValidator(v); err != nil {
			return &ValidationError{Name: "height", err: fmt.Errorf(`ent: validator failed for field "Animal.height": %w`, err)}
		}
	}
	if v, ok := au.mutation.Gender(); ok {
		if err := animal.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Animal.gender": %w`, err)}
		}
	}
	if v, ok := au.mutation.LifeStatus(); ok {
		if err := animal.LifeStatusValidator(v); err != nil {
			return &ValidationError{Name: "life_status", err: fmt.Errorf(`ent: validator failed for field "Animal.life_status": %w`, err)}
		}
	}
	return nil
}

func (au *AnimalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(animal.Table, animal.Columns, sqlgraph.NewFieldSpec(animal.FieldID, field.TypeUint64))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Weight(); ok {
		_spec.SetField(animal.FieldWeight, field.TypeFloat32, value)
	}
	if value, ok := au.mutation.AddedWeight(); ok {
		_spec.AddField(animal.FieldWeight, field.TypeFloat32, value)
	}
	if value, ok := au.mutation.Length(); ok {
		_spec.SetField(animal.FieldLength, field.TypeFloat32, value)
	}
	if value, ok := au.mutation.AddedLength(); ok {
		_spec.AddField(animal.FieldLength, field.TypeFloat32, value)
	}
	if value, ok := au.mutation.Height(); ok {
		_spec.SetField(animal.FieldHeight, field.TypeFloat32, value)
	}
	if value, ok := au.mutation.AddedHeight(); ok {
		_spec.AddField(animal.FieldHeight, field.TypeFloat32, value)
	}
	if value, ok := au.mutation.Gender(); ok {
		_spec.SetField(animal.FieldGender, field.TypeEnum, value)
	}
	if value, ok := au.mutation.LifeStatus(); ok {
		_spec.SetField(animal.FieldLifeStatus, field.TypeEnum, value)
	}
	if value, ok := au.mutation.ChippingDateTime(); ok {
		_spec.SetField(animal.FieldChippingDateTime, field.TypeTime, value)
	}
	if value, ok := au.mutation.DeathDateTime(); ok {
		_spec.SetField(animal.FieldDeathDateTime, field.TypeTime, value)
	}
	if au.mutation.DeathDateTimeCleared() {
		_spec.ClearField(animal.FieldDeathDateTime, field.TypeTime)
	}
	if au.mutation.ChipperCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   animal.ChipperTable,
			Columns: []string{animal.ChipperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint32,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ChipperIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   animal.ChipperTable,
			Columns: []string{animal.ChipperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint32,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.TypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   animal.TypesTable,
			Columns: animal.TypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: animaltag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedTypesIDs(); len(nodes) > 0 && !au.mutation.TypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   animal.TypesTable,
			Columns: animal.TypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: animaltag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.TypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   animal.TypesTable,
			Columns: animal.TypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: animaltag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ChippingLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   animal.ChippingLocationTable,
			Columns: []string{animal.ChippingLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: location.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ChippingLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   animal.ChippingLocationTable,
			Columns: []string{animal.ChippingLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: location.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   animal.LocationsTable,
			Columns: animal.LocationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: location.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedLocationsIDs(); len(nodes) > 0 && !au.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   animal.LocationsTable,
			Columns: animal.LocationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: location.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.LocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   animal.LocationsTable,
			Columns: animal.LocationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: location.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.VisitedLocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   animal.VisitedLocationsTable,
			Columns: []string{animal.VisitedLocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: visitedlocation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedVisitedLocationsIDs(); len(nodes) > 0 && !au.mutation.VisitedLocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   animal.VisitedLocationsTable,
			Columns: []string{animal.VisitedLocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: visitedlocation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.VisitedLocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   animal.VisitedLocationsTable,
			Columns: []string{animal.VisitedLocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: visitedlocation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{animal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AnimalUpdateOne is the builder for updating a single Animal entity.
type AnimalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AnimalMutation
}

// SetWeight sets the "weight" field.
func (auo *AnimalUpdateOne) SetWeight(f float32) *AnimalUpdateOne {
	auo.mutation.ResetWeight()
	auo.mutation.SetWeight(f)
	return auo
}

// AddWeight adds f to the "weight" field.
func (auo *AnimalUpdateOne) AddWeight(f float32) *AnimalUpdateOne {
	auo.mutation.AddWeight(f)
	return auo
}

// SetLength sets the "length" field.
func (auo *AnimalUpdateOne) SetLength(f float32) *AnimalUpdateOne {
	auo.mutation.ResetLength()
	auo.mutation.SetLength(f)
	return auo
}

// AddLength adds f to the "length" field.
func (auo *AnimalUpdateOne) AddLength(f float32) *AnimalUpdateOne {
	auo.mutation.AddLength(f)
	return auo
}

// SetHeight sets the "height" field.
func (auo *AnimalUpdateOne) SetHeight(f float32) *AnimalUpdateOne {
	auo.mutation.ResetHeight()
	auo.mutation.SetHeight(f)
	return auo
}

// AddHeight adds f to the "height" field.
func (auo *AnimalUpdateOne) AddHeight(f float32) *AnimalUpdateOne {
	auo.mutation.AddHeight(f)
	return auo
}

// SetGender sets the "gender" field.
func (auo *AnimalUpdateOne) SetGender(a animal.Gender) *AnimalUpdateOne {
	auo.mutation.SetGender(a)
	return auo
}

// SetLifeStatus sets the "life_status" field.
func (auo *AnimalUpdateOne) SetLifeStatus(as animal.LifeStatus) *AnimalUpdateOne {
	auo.mutation.SetLifeStatus(as)
	return auo
}

// SetNillableLifeStatus sets the "life_status" field if the given value is not nil.
func (auo *AnimalUpdateOne) SetNillableLifeStatus(as *animal.LifeStatus) *AnimalUpdateOne {
	if as != nil {
		auo.SetLifeStatus(*as)
	}
	return auo
}

// SetChippingDateTime sets the "chipping_date_time" field.
func (auo *AnimalUpdateOne) SetChippingDateTime(t time.Time) *AnimalUpdateOne {
	auo.mutation.SetChippingDateTime(t)
	return auo
}

// SetNillableChippingDateTime sets the "chipping_date_time" field if the given value is not nil.
func (auo *AnimalUpdateOne) SetNillableChippingDateTime(t *time.Time) *AnimalUpdateOne {
	if t != nil {
		auo.SetChippingDateTime(*t)
	}
	return auo
}

// SetChipperID sets the "chipper_id" field.
func (auo *AnimalUpdateOne) SetChipperID(u uint32) *AnimalUpdateOne {
	auo.mutation.SetChipperID(u)
	return auo
}

// SetNillableChipperID sets the "chipper_id" field if the given value is not nil.
func (auo *AnimalUpdateOne) SetNillableChipperID(u *uint32) *AnimalUpdateOne {
	if u != nil {
		auo.SetChipperID(*u)
	}
	return auo
}

// ClearChipperID clears the value of the "chipper_id" field.
func (auo *AnimalUpdateOne) ClearChipperID() *AnimalUpdateOne {
	auo.mutation.ClearChipperID()
	return auo
}

// SetChippingLocationID sets the "chipping_location_id" field.
func (auo *AnimalUpdateOne) SetChippingLocationID(u uint64) *AnimalUpdateOne {
	auo.mutation.SetChippingLocationID(u)
	return auo
}

// SetNillableChippingLocationID sets the "chipping_location_id" field if the given value is not nil.
func (auo *AnimalUpdateOne) SetNillableChippingLocationID(u *uint64) *AnimalUpdateOne {
	if u != nil {
		auo.SetChippingLocationID(*u)
	}
	return auo
}

// ClearChippingLocationID clears the value of the "chipping_location_id" field.
func (auo *AnimalUpdateOne) ClearChippingLocationID() *AnimalUpdateOne {
	auo.mutation.ClearChippingLocationID()
	return auo
}

// SetDeathDateTime sets the "death_date_time" field.
func (auo *AnimalUpdateOne) SetDeathDateTime(t time.Time) *AnimalUpdateOne {
	auo.mutation.SetDeathDateTime(t)
	return auo
}

// SetNillableDeathDateTime sets the "death_date_time" field if the given value is not nil.
func (auo *AnimalUpdateOne) SetNillableDeathDateTime(t *time.Time) *AnimalUpdateOne {
	if t != nil {
		auo.SetDeathDateTime(*t)
	}
	return auo
}

// ClearDeathDateTime clears the value of the "death_date_time" field.
func (auo *AnimalUpdateOne) ClearDeathDateTime() *AnimalUpdateOne {
	auo.mutation.ClearDeathDateTime()
	return auo
}

// SetChipper sets the "chipper" edge to the User entity.
func (auo *AnimalUpdateOne) SetChipper(u *User) *AnimalUpdateOne {
	return auo.SetChipperID(u.ID)
}

// AddTypeIDs adds the "types" edge to the AnimalTag entity by IDs.
func (auo *AnimalUpdateOne) AddTypeIDs(ids ...uint64) *AnimalUpdateOne {
	auo.mutation.AddTypeIDs(ids...)
	return auo
}

// AddTypes adds the "types" edges to the AnimalTag entity.
func (auo *AnimalUpdateOne) AddTypes(a ...*AnimalTag) *AnimalUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddTypeIDs(ids...)
}

// SetChippingLocation sets the "chipping_location" edge to the Location entity.
func (auo *AnimalUpdateOne) SetChippingLocation(l *Location) *AnimalUpdateOne {
	return auo.SetChippingLocationID(l.ID)
}

// AddLocationIDs adds the "locations" edge to the Location entity by IDs.
func (auo *AnimalUpdateOne) AddLocationIDs(ids ...uint64) *AnimalUpdateOne {
	auo.mutation.AddLocationIDs(ids...)
	return auo
}

// AddLocations adds the "locations" edges to the Location entity.
func (auo *AnimalUpdateOne) AddLocations(l ...*Location) *AnimalUpdateOne {
	ids := make([]uint64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return auo.AddLocationIDs(ids...)
}

// AddVisitedLocationIDs adds the "visited_locations" edge to the VisitedLocation entity by IDs.
func (auo *AnimalUpdateOne) AddVisitedLocationIDs(ids ...uint64) *AnimalUpdateOne {
	auo.mutation.AddVisitedLocationIDs(ids...)
	return auo
}

// AddVisitedLocations adds the "visited_locations" edges to the VisitedLocation entity.
func (auo *AnimalUpdateOne) AddVisitedLocations(v ...*VisitedLocation) *AnimalUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return auo.AddVisitedLocationIDs(ids...)
}

// Mutation returns the AnimalMutation object of the builder.
func (auo *AnimalUpdateOne) Mutation() *AnimalMutation {
	return auo.mutation
}

// ClearChipper clears the "chipper" edge to the User entity.
func (auo *AnimalUpdateOne) ClearChipper() *AnimalUpdateOne {
	auo.mutation.ClearChipper()
	return auo
}

// ClearTypes clears all "types" edges to the AnimalTag entity.
func (auo *AnimalUpdateOne) ClearTypes() *AnimalUpdateOne {
	auo.mutation.ClearTypes()
	return auo
}

// RemoveTypeIDs removes the "types" edge to AnimalTag entities by IDs.
func (auo *AnimalUpdateOne) RemoveTypeIDs(ids ...uint64) *AnimalUpdateOne {
	auo.mutation.RemoveTypeIDs(ids...)
	return auo
}

// RemoveTypes removes "types" edges to AnimalTag entities.
func (auo *AnimalUpdateOne) RemoveTypes(a ...*AnimalTag) *AnimalUpdateOne {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveTypeIDs(ids...)
}

// ClearChippingLocation clears the "chipping_location" edge to the Location entity.
func (auo *AnimalUpdateOne) ClearChippingLocation() *AnimalUpdateOne {
	auo.mutation.ClearChippingLocation()
	return auo
}

// ClearLocations clears all "locations" edges to the Location entity.
func (auo *AnimalUpdateOne) ClearLocations() *AnimalUpdateOne {
	auo.mutation.ClearLocations()
	return auo
}

// RemoveLocationIDs removes the "locations" edge to Location entities by IDs.
func (auo *AnimalUpdateOne) RemoveLocationIDs(ids ...uint64) *AnimalUpdateOne {
	auo.mutation.RemoveLocationIDs(ids...)
	return auo
}

// RemoveLocations removes "locations" edges to Location entities.
func (auo *AnimalUpdateOne) RemoveLocations(l ...*Location) *AnimalUpdateOne {
	ids := make([]uint64, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return auo.RemoveLocationIDs(ids...)
}

// ClearVisitedLocations clears all "visited_locations" edges to the VisitedLocation entity.
func (auo *AnimalUpdateOne) ClearVisitedLocations() *AnimalUpdateOne {
	auo.mutation.ClearVisitedLocations()
	return auo
}

// RemoveVisitedLocationIDs removes the "visited_locations" edge to VisitedLocation entities by IDs.
func (auo *AnimalUpdateOne) RemoveVisitedLocationIDs(ids ...uint64) *AnimalUpdateOne {
	auo.mutation.RemoveVisitedLocationIDs(ids...)
	return auo
}

// RemoveVisitedLocations removes "visited_locations" edges to VisitedLocation entities.
func (auo *AnimalUpdateOne) RemoveVisitedLocations(v ...*VisitedLocation) *AnimalUpdateOne {
	ids := make([]uint64, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return auo.RemoveVisitedLocationIDs(ids...)
}

// Where appends a list predicates to the AnimalUpdate builder.
func (auo *AnimalUpdateOne) Where(ps ...predicate.Animal) *AnimalUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AnimalUpdateOne) Select(field string, fields ...string) *AnimalUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Animal entity.
func (auo *AnimalUpdateOne) Save(ctx context.Context) (*Animal, error) {
	return withHooks[*Animal, AnimalMutation](ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AnimalUpdateOne) SaveX(ctx context.Context) *Animal {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AnimalUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AnimalUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AnimalUpdateOne) check() error {
	if v, ok := auo.mutation.Weight(); ok {
		if err := animal.WeightValidator(v); err != nil {
			return &ValidationError{Name: "weight", err: fmt.Errorf(`ent: validator failed for field "Animal.weight": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Length(); ok {
		if err := animal.LengthValidator(v); err != nil {
			return &ValidationError{Name: "length", err: fmt.Errorf(`ent: validator failed for field "Animal.length": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Height(); ok {
		if err := animal.HeightValidator(v); err != nil {
			return &ValidationError{Name: "height", err: fmt.Errorf(`ent: validator failed for field "Animal.height": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Gender(); ok {
		if err := animal.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Animal.gender": %w`, err)}
		}
	}
	if v, ok := auo.mutation.LifeStatus(); ok {
		if err := animal.LifeStatusValidator(v); err != nil {
			return &ValidationError{Name: "life_status", err: fmt.Errorf(`ent: validator failed for field "Animal.life_status": %w`, err)}
		}
	}
	return nil
}

func (auo *AnimalUpdateOne) sqlSave(ctx context.Context) (_node *Animal, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(animal.Table, animal.Columns, sqlgraph.NewFieldSpec(animal.FieldID, field.TypeUint64))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Animal.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, animal.FieldID)
		for _, f := range fields {
			if !animal.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != animal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Weight(); ok {
		_spec.SetField(animal.FieldWeight, field.TypeFloat32, value)
	}
	if value, ok := auo.mutation.AddedWeight(); ok {
		_spec.AddField(animal.FieldWeight, field.TypeFloat32, value)
	}
	if value, ok := auo.mutation.Length(); ok {
		_spec.SetField(animal.FieldLength, field.TypeFloat32, value)
	}
	if value, ok := auo.mutation.AddedLength(); ok {
		_spec.AddField(animal.FieldLength, field.TypeFloat32, value)
	}
	if value, ok := auo.mutation.Height(); ok {
		_spec.SetField(animal.FieldHeight, field.TypeFloat32, value)
	}
	if value, ok := auo.mutation.AddedHeight(); ok {
		_spec.AddField(animal.FieldHeight, field.TypeFloat32, value)
	}
	if value, ok := auo.mutation.Gender(); ok {
		_spec.SetField(animal.FieldGender, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.LifeStatus(); ok {
		_spec.SetField(animal.FieldLifeStatus, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.ChippingDateTime(); ok {
		_spec.SetField(animal.FieldChippingDateTime, field.TypeTime, value)
	}
	if value, ok := auo.mutation.DeathDateTime(); ok {
		_spec.SetField(animal.FieldDeathDateTime, field.TypeTime, value)
	}
	if auo.mutation.DeathDateTimeCleared() {
		_spec.ClearField(animal.FieldDeathDateTime, field.TypeTime)
	}
	if auo.mutation.ChipperCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   animal.ChipperTable,
			Columns: []string{animal.ChipperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint32,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ChipperIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   animal.ChipperTable,
			Columns: []string{animal.ChipperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint32,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.TypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   animal.TypesTable,
			Columns: animal.TypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: animaltag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedTypesIDs(); len(nodes) > 0 && !auo.mutation.TypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   animal.TypesTable,
			Columns: animal.TypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: animaltag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.TypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   animal.TypesTable,
			Columns: animal.TypesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: animaltag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ChippingLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   animal.ChippingLocationTable,
			Columns: []string{animal.ChippingLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: location.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ChippingLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   animal.ChippingLocationTable,
			Columns: []string{animal.ChippingLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: location.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   animal.LocationsTable,
			Columns: animal.LocationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: location.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedLocationsIDs(); len(nodes) > 0 && !auo.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   animal.LocationsTable,
			Columns: animal.LocationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: location.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.LocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   animal.LocationsTable,
			Columns: animal.LocationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: location.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.VisitedLocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   animal.VisitedLocationsTable,
			Columns: []string{animal.VisitedLocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: visitedlocation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedVisitedLocationsIDs(); len(nodes) > 0 && !auo.mutation.VisitedLocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   animal.VisitedLocationsTable,
			Columns: []string{animal.VisitedLocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: visitedlocation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.VisitedLocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   animal.VisitedLocationsTable,
			Columns: []string{animal.VisitedLocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: visitedlocation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Animal{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{animal.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
