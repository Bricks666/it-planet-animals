// Code generated by ent, DO NOT EDIT.

package location

const (
	// Label holds the string label denoting the location type in the database.
	Label = "location"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLatitude holds the string denoting the latitude field in the database.
	FieldLatitude = "latitude"
	// FieldLongitude holds the string denoting the longitude field in the database.
	FieldLongitude = "longitude"
	// EdgeVisitedLocationsAnimals holds the string denoting the visited_locations_animals edge name in mutations.
	EdgeVisitedLocationsAnimals = "visited_locations_animals"
	// EdgeLocations holds the string denoting the locations edge name in mutations.
	EdgeLocations = "locations"
	// Table holds the table name of the location in the database.
	Table = "locations"
	// VisitedLocationsAnimalsTable is the table that holds the visited_locations_animals relation/edge. The primary key declared below.
	VisitedLocationsAnimalsTable = "animals_locations"
	// VisitedLocationsAnimalsInverseTable is the table name for the Animal entity.
	// It exists in this package in order to avoid circular dependency with the "animal" package.
	VisitedLocationsAnimalsInverseTable = "animals"
	// LocationsTable is the table that holds the locations relation/edge.
	LocationsTable = "animals_locations"
	// LocationsInverseTable is the table name for the AnimalsLocations entity.
	// It exists in this package in order to avoid circular dependency with the "animalslocations" package.
	LocationsInverseTable = "animals_locations"
	// LocationsColumn is the table column denoting the locations relation/edge.
	LocationsColumn = "location_id"
)

// Columns holds all SQL columns for location fields.
var Columns = []string{
	FieldID,
	FieldLatitude,
	FieldLongitude,
}

var (
	// VisitedLocationsAnimalsPrimaryKey and VisitedLocationsAnimalsColumn2 are the table columns denoting the
	// primary key for the visited_locations_animals relation (M2M).
	VisitedLocationsAnimalsPrimaryKey = []string{"animalId", "locationId"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// LatitudeValidator is a validator for the "latitude" field. It is called by the builders before save.
	LatitudeValidator func(float64) error
	// LongitudeValidator is a validator for the "longitude" field. It is called by the builders before save.
	LongitudeValidator func(float64) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(uint64) error
)
