// Code generated by ent, DO NOT EDIT.

package location

const (
	// Label holds the string label denoting the location type in the database.
	Label = "location"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldLatitude holds the string denoting the latitude field in the database.
	FieldLatitude = "latitude"
	// FieldLongitude holds the string denoting the longitude field in the database.
	FieldLongitude = "longitude"
	// EdgeChippedAnimals holds the string denoting the chipped_animals edge name in mutations.
	EdgeChippedAnimals = "chipped_animals"
	// EdgeAnimals holds the string denoting the animals edge name in mutations.
	EdgeAnimals = "animals"
	// EdgeHavingAnimals holds the string denoting the having_animals edge name in mutations.
	EdgeHavingAnimals = "having_animals"
	// Table holds the table name of the location in the database.
	Table = "locations"
	// ChippedAnimalsTable is the table that holds the chipped_animals relation/edge.
	ChippedAnimalsTable = "animals"
	// ChippedAnimalsInverseTable is the table name for the Animal entity.
	// It exists in this package in order to avoid circular dependency with the "animal" package.
	ChippedAnimalsInverseTable = "animals"
	// ChippedAnimalsColumn is the table column denoting the chipped_animals relation/edge.
	ChippedAnimalsColumn = "chipping_location_id"
	// AnimalsTable is the table that holds the animals relation/edge. The primary key declared below.
	AnimalsTable = "visited_locations"
	// AnimalsInverseTable is the table name for the Animal entity.
	// It exists in this package in order to avoid circular dependency with the "animal" package.
	AnimalsInverseTable = "animals"
	// HavingAnimalsTable is the table that holds the having_animals relation/edge.
	HavingAnimalsTable = "visited_locations"
	// HavingAnimalsInverseTable is the table name for the VisitedLocation entity.
	// It exists in this package in order to avoid circular dependency with the "visitedlocation" package.
	HavingAnimalsInverseTable = "visited_locations"
	// HavingAnimalsColumn is the table column denoting the having_animals relation/edge.
	HavingAnimalsColumn = "location_id"
)

// Columns holds all SQL columns for location fields.
var Columns = []string{
	FieldID,
	FieldLatitude,
	FieldLongitude,
}

var (
	// AnimalsPrimaryKey and AnimalsColumn2 are the table columns denoting the
	// primary key for the animals relation (M2M).
	AnimalsPrimaryKey = []string{"animal_id", "location_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// LatitudeValidator is a validator for the "latitude" field. It is called by the builders before save.
	LatitudeValidator func(float64) error
	// LongitudeValidator is a validator for the "longitude" field. It is called by the builders before save.
	LongitudeValidator func(float64) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(uint64) error
)
