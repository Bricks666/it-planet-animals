// Code generated by ent, DO NOT EDIT.

package ent

import (
	"animals/ent/animal"
	"animals/ent/animalslocations"
	"animals/ent/location"
	"animals/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AnimalsLocationsUpdate is the builder for updating AnimalsLocations entities.
type AnimalsLocationsUpdate struct {
	config
	hooks    []Hook
	mutation *AnimalsLocationsMutation
}

// Where appends a list predicates to the AnimalsLocationsUpdate builder.
func (alu *AnimalsLocationsUpdate) Where(ps ...predicate.AnimalsLocations) *AnimalsLocationsUpdate {
	alu.mutation.Where(ps...)
	return alu
}

// SetAnimalId sets the "animalId" field.
func (alu *AnimalsLocationsUpdate) SetAnimalId(u uint64) *AnimalsLocationsUpdate {
	alu.mutation.SetAnimalId(u)
	return alu
}

// SetLocationId sets the "locationId" field.
func (alu *AnimalsLocationsUpdate) SetLocationId(u uint64) *AnimalsLocationsUpdate {
	alu.mutation.SetLocationId(u)
	return alu
}

// SetDateTimeOfVisitLocationPoint sets the "dateTimeOfVisitLocationPoint" field.
func (alu *AnimalsLocationsUpdate) SetDateTimeOfVisitLocationPoint(t time.Time) *AnimalsLocationsUpdate {
	alu.mutation.SetDateTimeOfVisitLocationPoint(t)
	return alu
}

// SetNillableDateTimeOfVisitLocationPoint sets the "dateTimeOfVisitLocationPoint" field if the given value is not nil.
func (alu *AnimalsLocationsUpdate) SetNillableDateTimeOfVisitLocationPoint(t *time.Time) *AnimalsLocationsUpdate {
	if t != nil {
		alu.SetDateTimeOfVisitLocationPoint(*t)
	}
	return alu
}

// SetAnimalsLocationsAnimalID sets the "animals_locations_animal" edge to the Animal entity by ID.
func (alu *AnimalsLocationsUpdate) SetAnimalsLocationsAnimalID(id uint64) *AnimalsLocationsUpdate {
	alu.mutation.SetAnimalsLocationsAnimalID(id)
	return alu
}

// SetAnimalsLocationsAnimal sets the "animals_locations_animal" edge to the Animal entity.
func (alu *AnimalsLocationsUpdate) SetAnimalsLocationsAnimal(a *Animal) *AnimalsLocationsUpdate {
	return alu.SetAnimalsLocationsAnimalID(a.ID)
}

// SetAnimalsLocationsLocationID sets the "animals_locations_location" edge to the Location entity by ID.
func (alu *AnimalsLocationsUpdate) SetAnimalsLocationsLocationID(id uint64) *AnimalsLocationsUpdate {
	alu.mutation.SetAnimalsLocationsLocationID(id)
	return alu
}

// SetAnimalsLocationsLocation sets the "animals_locations_location" edge to the Location entity.
func (alu *AnimalsLocationsUpdate) SetAnimalsLocationsLocation(l *Location) *AnimalsLocationsUpdate {
	return alu.SetAnimalsLocationsLocationID(l.ID)
}

// Mutation returns the AnimalsLocationsMutation object of the builder.
func (alu *AnimalsLocationsUpdate) Mutation() *AnimalsLocationsMutation {
	return alu.mutation
}

// ClearAnimalsLocationsAnimal clears the "animals_locations_animal" edge to the Animal entity.
func (alu *AnimalsLocationsUpdate) ClearAnimalsLocationsAnimal() *AnimalsLocationsUpdate {
	alu.mutation.ClearAnimalsLocationsAnimal()
	return alu
}

// ClearAnimalsLocationsLocation clears the "animals_locations_location" edge to the Location entity.
func (alu *AnimalsLocationsUpdate) ClearAnimalsLocationsLocation() *AnimalsLocationsUpdate {
	alu.mutation.ClearAnimalsLocationsLocation()
	return alu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (alu *AnimalsLocationsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, AnimalsLocationsMutation](ctx, alu.sqlSave, alu.mutation, alu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (alu *AnimalsLocationsUpdate) SaveX(ctx context.Context) int {
	affected, err := alu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (alu *AnimalsLocationsUpdate) Exec(ctx context.Context) error {
	_, err := alu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alu *AnimalsLocationsUpdate) ExecX(ctx context.Context) {
	if err := alu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (alu *AnimalsLocationsUpdate) check() error {
	if _, ok := alu.mutation.AnimalsLocationsAnimalID(); alu.mutation.AnimalsLocationsAnimalCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AnimalsLocations.animals_locations_animal"`)
	}
	if _, ok := alu.mutation.AnimalsLocationsLocationID(); alu.mutation.AnimalsLocationsLocationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AnimalsLocations.animals_locations_location"`)
	}
	return nil
}

func (alu *AnimalsLocationsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := alu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(animalslocations.Table, animalslocations.Columns, sqlgraph.NewFieldSpec(animalslocations.FieldID, field.TypeUint64))
	if ps := alu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := alu.mutation.DateTimeOfVisitLocationPoint(); ok {
		_spec.SetField(animalslocations.FieldDateTimeOfVisitLocationPoint, field.TypeTime, value)
	}
	if alu.mutation.AnimalsLocationsAnimalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   animalslocations.AnimalsLocationsAnimalTable,
			Columns: []string{animalslocations.AnimalsLocationsAnimalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: animal.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.AnimalsLocationsAnimalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   animalslocations.AnimalsLocationsAnimalTable,
			Columns: []string{animalslocations.AnimalsLocationsAnimalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: animal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if alu.mutation.AnimalsLocationsLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   animalslocations.AnimalsLocationsLocationTable,
			Columns: []string{animalslocations.AnimalsLocationsLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: location.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.AnimalsLocationsLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   animalslocations.AnimalsLocationsLocationTable,
			Columns: []string{animalslocations.AnimalsLocationsLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: location.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, alu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{animalslocations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	alu.mutation.done = true
	return n, nil
}

// AnimalsLocationsUpdateOne is the builder for updating a single AnimalsLocations entity.
type AnimalsLocationsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AnimalsLocationsMutation
}

// SetAnimalId sets the "animalId" field.
func (aluo *AnimalsLocationsUpdateOne) SetAnimalId(u uint64) *AnimalsLocationsUpdateOne {
	aluo.mutation.SetAnimalId(u)
	return aluo
}

// SetLocationId sets the "locationId" field.
func (aluo *AnimalsLocationsUpdateOne) SetLocationId(u uint64) *AnimalsLocationsUpdateOne {
	aluo.mutation.SetLocationId(u)
	return aluo
}

// SetDateTimeOfVisitLocationPoint sets the "dateTimeOfVisitLocationPoint" field.
func (aluo *AnimalsLocationsUpdateOne) SetDateTimeOfVisitLocationPoint(t time.Time) *AnimalsLocationsUpdateOne {
	aluo.mutation.SetDateTimeOfVisitLocationPoint(t)
	return aluo
}

// SetNillableDateTimeOfVisitLocationPoint sets the "dateTimeOfVisitLocationPoint" field if the given value is not nil.
func (aluo *AnimalsLocationsUpdateOne) SetNillableDateTimeOfVisitLocationPoint(t *time.Time) *AnimalsLocationsUpdateOne {
	if t != nil {
		aluo.SetDateTimeOfVisitLocationPoint(*t)
	}
	return aluo
}

// SetAnimalsLocationsAnimalID sets the "animals_locations_animal" edge to the Animal entity by ID.
func (aluo *AnimalsLocationsUpdateOne) SetAnimalsLocationsAnimalID(id uint64) *AnimalsLocationsUpdateOne {
	aluo.mutation.SetAnimalsLocationsAnimalID(id)
	return aluo
}

// SetAnimalsLocationsAnimal sets the "animals_locations_animal" edge to the Animal entity.
func (aluo *AnimalsLocationsUpdateOne) SetAnimalsLocationsAnimal(a *Animal) *AnimalsLocationsUpdateOne {
	return aluo.SetAnimalsLocationsAnimalID(a.ID)
}

// SetAnimalsLocationsLocationID sets the "animals_locations_location" edge to the Location entity by ID.
func (aluo *AnimalsLocationsUpdateOne) SetAnimalsLocationsLocationID(id uint64) *AnimalsLocationsUpdateOne {
	aluo.mutation.SetAnimalsLocationsLocationID(id)
	return aluo
}

// SetAnimalsLocationsLocation sets the "animals_locations_location" edge to the Location entity.
func (aluo *AnimalsLocationsUpdateOne) SetAnimalsLocationsLocation(l *Location) *AnimalsLocationsUpdateOne {
	return aluo.SetAnimalsLocationsLocationID(l.ID)
}

// Mutation returns the AnimalsLocationsMutation object of the builder.
func (aluo *AnimalsLocationsUpdateOne) Mutation() *AnimalsLocationsMutation {
	return aluo.mutation
}

// ClearAnimalsLocationsAnimal clears the "animals_locations_animal" edge to the Animal entity.
func (aluo *AnimalsLocationsUpdateOne) ClearAnimalsLocationsAnimal() *AnimalsLocationsUpdateOne {
	aluo.mutation.ClearAnimalsLocationsAnimal()
	return aluo
}

// ClearAnimalsLocationsLocation clears the "animals_locations_location" edge to the Location entity.
func (aluo *AnimalsLocationsUpdateOne) ClearAnimalsLocationsLocation() *AnimalsLocationsUpdateOne {
	aluo.mutation.ClearAnimalsLocationsLocation()
	return aluo
}

// Where appends a list predicates to the AnimalsLocationsUpdate builder.
func (aluo *AnimalsLocationsUpdateOne) Where(ps ...predicate.AnimalsLocations) *AnimalsLocationsUpdateOne {
	aluo.mutation.Where(ps...)
	return aluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aluo *AnimalsLocationsUpdateOne) Select(field string, fields ...string) *AnimalsLocationsUpdateOne {
	aluo.fields = append([]string{field}, fields...)
	return aluo
}

// Save executes the query and returns the updated AnimalsLocations entity.
func (aluo *AnimalsLocationsUpdateOne) Save(ctx context.Context) (*AnimalsLocations, error) {
	return withHooks[*AnimalsLocations, AnimalsLocationsMutation](ctx, aluo.sqlSave, aluo.mutation, aluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aluo *AnimalsLocationsUpdateOne) SaveX(ctx context.Context) *AnimalsLocations {
	node, err := aluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aluo *AnimalsLocationsUpdateOne) Exec(ctx context.Context) error {
	_, err := aluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aluo *AnimalsLocationsUpdateOne) ExecX(ctx context.Context) {
	if err := aluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aluo *AnimalsLocationsUpdateOne) check() error {
	if _, ok := aluo.mutation.AnimalsLocationsAnimalID(); aluo.mutation.AnimalsLocationsAnimalCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AnimalsLocations.animals_locations_animal"`)
	}
	if _, ok := aluo.mutation.AnimalsLocationsLocationID(); aluo.mutation.AnimalsLocationsLocationCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AnimalsLocations.animals_locations_location"`)
	}
	return nil
}

func (aluo *AnimalsLocationsUpdateOne) sqlSave(ctx context.Context) (_node *AnimalsLocations, err error) {
	if err := aluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(animalslocations.Table, animalslocations.Columns, sqlgraph.NewFieldSpec(animalslocations.FieldID, field.TypeUint64))
	id, ok := aluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AnimalsLocations.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, animalslocations.FieldID)
		for _, f := range fields {
			if !animalslocations.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != animalslocations.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aluo.mutation.DateTimeOfVisitLocationPoint(); ok {
		_spec.SetField(animalslocations.FieldDateTimeOfVisitLocationPoint, field.TypeTime, value)
	}
	if aluo.mutation.AnimalsLocationsAnimalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   animalslocations.AnimalsLocationsAnimalTable,
			Columns: []string{animalslocations.AnimalsLocationsAnimalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: animal.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.AnimalsLocationsAnimalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   animalslocations.AnimalsLocationsAnimalTable,
			Columns: []string{animalslocations.AnimalsLocationsAnimalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: animal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aluo.mutation.AnimalsLocationsLocationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   animalslocations.AnimalsLocationsLocationTable,
			Columns: []string{animalslocations.AnimalsLocationsLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: location.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.AnimalsLocationsLocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   animalslocations.AnimalsLocationsLocationTable,
			Columns: []string{animalslocations.AnimalsLocationsLocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: location.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AnimalsLocations{config: aluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{animalslocations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aluo.mutation.done = true
	return _node, nil
}
