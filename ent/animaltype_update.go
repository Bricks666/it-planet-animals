// Code generated by ent, DO NOT EDIT.

package ent

import (
	"animals/ent/animal"
	"animals/ent/animaltag"
	"animals/ent/animaltype"
	"animals/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AnimalTypeUpdate is the builder for updating AnimalType entities.
type AnimalTypeUpdate struct {
	config
	hooks    []Hook
	mutation *AnimalTypeMutation
}

// Where appends a list predicates to the AnimalTypeUpdate builder.
func (atu *AnimalTypeUpdate) Where(ps ...predicate.AnimalType) *AnimalTypeUpdate {
	atu.mutation.Where(ps...)
	return atu
}

// SetAnimalID sets the "animal_id" field.
func (atu *AnimalTypeUpdate) SetAnimalID(u uint64) *AnimalTypeUpdate {
	atu.mutation.SetAnimalID(u)
	return atu
}

// SetTypeID sets the "type_id" field.
func (atu *AnimalTypeUpdate) SetTypeID(u uint64) *AnimalTypeUpdate {
	atu.mutation.SetTypeID(u)
	return atu
}

// SetAnimalsID sets the "animals" edge to the Animal entity by ID.
func (atu *AnimalTypeUpdate) SetAnimalsID(id uint64) *AnimalTypeUpdate {
	atu.mutation.SetAnimalsID(id)
	return atu
}

// SetAnimals sets the "animals" edge to the Animal entity.
func (atu *AnimalTypeUpdate) SetAnimals(a *Animal) *AnimalTypeUpdate {
	return atu.SetAnimalsID(a.ID)
}

// SetTypesID sets the "types" edge to the AnimalTag entity by ID.
func (atu *AnimalTypeUpdate) SetTypesID(id uint64) *AnimalTypeUpdate {
	atu.mutation.SetTypesID(id)
	return atu
}

// SetTypes sets the "types" edge to the AnimalTag entity.
func (atu *AnimalTypeUpdate) SetTypes(a *AnimalTag) *AnimalTypeUpdate {
	return atu.SetTypesID(a.ID)
}

// Mutation returns the AnimalTypeMutation object of the builder.
func (atu *AnimalTypeUpdate) Mutation() *AnimalTypeMutation {
	return atu.mutation
}

// ClearAnimals clears the "animals" edge to the Animal entity.
func (atu *AnimalTypeUpdate) ClearAnimals() *AnimalTypeUpdate {
	atu.mutation.ClearAnimals()
	return atu
}

// ClearTypes clears the "types" edge to the AnimalTag entity.
func (atu *AnimalTypeUpdate) ClearTypes() *AnimalTypeUpdate {
	atu.mutation.ClearTypes()
	return atu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atu *AnimalTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, AnimalTypeMutation](ctx, atu.sqlSave, atu.mutation, atu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atu *AnimalTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := atu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atu *AnimalTypeUpdate) Exec(ctx context.Context) error {
	_, err := atu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atu *AnimalTypeUpdate) ExecX(ctx context.Context) {
	if err := atu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atu *AnimalTypeUpdate) check() error {
	if _, ok := atu.mutation.AnimalsID(); atu.mutation.AnimalsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AnimalType.animals"`)
	}
	if _, ok := atu.mutation.TypesID(); atu.mutation.TypesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AnimalType.types"`)
	}
	return nil
}

func (atu *AnimalTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := atu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(animaltype.Table, animaltype.Columns, sqlgraph.NewFieldSpec(animaltype.FieldAnimalID, field.TypeUint64), sqlgraph.NewFieldSpec(animaltype.FieldTypeID, field.TypeUint64))
	if ps := atu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if atu.mutation.AnimalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   animaltype.AnimalsTable,
			Columns: []string{animaltype.AnimalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: animal.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.AnimalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   animaltype.AnimalsTable,
			Columns: []string{animaltype.AnimalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: animal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atu.mutation.TypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   animaltype.TypesTable,
			Columns: []string{animaltype.TypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: animaltag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.TypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   animaltype.TypesTable,
			Columns: []string{animaltype.TypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: animaltag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{animaltype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	atu.mutation.done = true
	return n, nil
}

// AnimalTypeUpdateOne is the builder for updating a single AnimalType entity.
type AnimalTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AnimalTypeMutation
}

// SetAnimalID sets the "animal_id" field.
func (atuo *AnimalTypeUpdateOne) SetAnimalID(u uint64) *AnimalTypeUpdateOne {
	atuo.mutation.SetAnimalID(u)
	return atuo
}

// SetTypeID sets the "type_id" field.
func (atuo *AnimalTypeUpdateOne) SetTypeID(u uint64) *AnimalTypeUpdateOne {
	atuo.mutation.SetTypeID(u)
	return atuo
}

// SetAnimalsID sets the "animals" edge to the Animal entity by ID.
func (atuo *AnimalTypeUpdateOne) SetAnimalsID(id uint64) *AnimalTypeUpdateOne {
	atuo.mutation.SetAnimalsID(id)
	return atuo
}

// SetAnimals sets the "animals" edge to the Animal entity.
func (atuo *AnimalTypeUpdateOne) SetAnimals(a *Animal) *AnimalTypeUpdateOne {
	return atuo.SetAnimalsID(a.ID)
}

// SetTypesID sets the "types" edge to the AnimalTag entity by ID.
func (atuo *AnimalTypeUpdateOne) SetTypesID(id uint64) *AnimalTypeUpdateOne {
	atuo.mutation.SetTypesID(id)
	return atuo
}

// SetTypes sets the "types" edge to the AnimalTag entity.
func (atuo *AnimalTypeUpdateOne) SetTypes(a *AnimalTag) *AnimalTypeUpdateOne {
	return atuo.SetTypesID(a.ID)
}

// Mutation returns the AnimalTypeMutation object of the builder.
func (atuo *AnimalTypeUpdateOne) Mutation() *AnimalTypeMutation {
	return atuo.mutation
}

// ClearAnimals clears the "animals" edge to the Animal entity.
func (atuo *AnimalTypeUpdateOne) ClearAnimals() *AnimalTypeUpdateOne {
	atuo.mutation.ClearAnimals()
	return atuo
}

// ClearTypes clears the "types" edge to the AnimalTag entity.
func (atuo *AnimalTypeUpdateOne) ClearTypes() *AnimalTypeUpdateOne {
	atuo.mutation.ClearTypes()
	return atuo
}

// Where appends a list predicates to the AnimalTypeUpdate builder.
func (atuo *AnimalTypeUpdateOne) Where(ps ...predicate.AnimalType) *AnimalTypeUpdateOne {
	atuo.mutation.Where(ps...)
	return atuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atuo *AnimalTypeUpdateOne) Select(field string, fields ...string) *AnimalTypeUpdateOne {
	atuo.fields = append([]string{field}, fields...)
	return atuo
}

// Save executes the query and returns the updated AnimalType entity.
func (atuo *AnimalTypeUpdateOne) Save(ctx context.Context) (*AnimalType, error) {
	return withHooks[*AnimalType, AnimalTypeMutation](ctx, atuo.sqlSave, atuo.mutation, atuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atuo *AnimalTypeUpdateOne) SaveX(ctx context.Context) *AnimalType {
	node, err := atuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atuo *AnimalTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := atuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atuo *AnimalTypeUpdateOne) ExecX(ctx context.Context) {
	if err := atuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atuo *AnimalTypeUpdateOne) check() error {
	if _, ok := atuo.mutation.AnimalsID(); atuo.mutation.AnimalsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AnimalType.animals"`)
	}
	if _, ok := atuo.mutation.TypesID(); atuo.mutation.TypesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "AnimalType.types"`)
	}
	return nil
}

func (atuo *AnimalTypeUpdateOne) sqlSave(ctx context.Context) (_node *AnimalType, err error) {
	if err := atuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(animaltype.Table, animaltype.Columns, sqlgraph.NewFieldSpec(animaltype.FieldAnimalID, field.TypeUint64), sqlgraph.NewFieldSpec(animaltype.FieldTypeID, field.TypeUint64))
	if id, ok := atuo.mutation.AnimalID(); !ok {
		return nil, &ValidationError{Name: "animal_id", err: errors.New(`ent: missing "AnimalType.animal_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := atuo.mutation.TypeID(); !ok {
		return nil, &ValidationError{Name: "type_id", err: errors.New(`ent: missing "AnimalType.type_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := atuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !animaltype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := atuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if atuo.mutation.AnimalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   animaltype.AnimalsTable,
			Columns: []string{animaltype.AnimalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: animal.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.AnimalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   animaltype.AnimalsTable,
			Columns: []string{animaltype.AnimalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: animal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if atuo.mutation.TypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   animaltype.TypesTable,
			Columns: []string{animaltype.TypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: animaltag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.TypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   animaltype.TypesTable,
			Columns: []string{animaltype.TypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: animaltag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AnimalType{config: atuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{animaltype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	atuo.mutation.done = true
	return _node, nil
}
