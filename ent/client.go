// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"animals/ent/migrate"

	"animals/ent/animal"
	"animals/ent/animaltag"
	"animals/ent/animaltype"
	"animals/ent/area"
	"animals/ent/location"
	"animals/ent/user"
	"animals/ent/visitedlocation"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Animal is the client for interacting with the Animal builders.
	Animal *AnimalClient
	// AnimalTag is the client for interacting with the AnimalTag builders.
	AnimalTag *AnimalTagClient
	// AnimalType is the client for interacting with the AnimalType builders.
	AnimalType *AnimalTypeClient
	// Area is the client for interacting with the Area builders.
	Area *AreaClient
	// Location is the client for interacting with the Location builders.
	Location *LocationClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// VisitedLocation is the client for interacting with the VisitedLocation builders.
	VisitedLocation *VisitedLocationClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Animal = NewAnimalClient(c.config)
	c.AnimalTag = NewAnimalTagClient(c.config)
	c.AnimalType = NewAnimalTypeClient(c.config)
	c.Area = NewAreaClient(c.config)
	c.Location = NewLocationClient(c.config)
	c.User = NewUserClient(c.config)
	c.VisitedLocation = NewVisitedLocationClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Animal:          NewAnimalClient(cfg),
		AnimalTag:       NewAnimalTagClient(cfg),
		AnimalType:      NewAnimalTypeClient(cfg),
		Area:            NewAreaClient(cfg),
		Location:        NewLocationClient(cfg),
		User:            NewUserClient(cfg),
		VisitedLocation: NewVisitedLocationClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Animal:          NewAnimalClient(cfg),
		AnimalTag:       NewAnimalTagClient(cfg),
		AnimalType:      NewAnimalTypeClient(cfg),
		Area:            NewAreaClient(cfg),
		Location:        NewLocationClient(cfg),
		User:            NewUserClient(cfg),
		VisitedLocation: NewVisitedLocationClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Animal.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Animal.Use(hooks...)
	c.AnimalTag.Use(hooks...)
	c.AnimalType.Use(hooks...)
	c.Area.Use(hooks...)
	c.Location.Use(hooks...)
	c.User.Use(hooks...)
	c.VisitedLocation.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Animal.Intercept(interceptors...)
	c.AnimalTag.Intercept(interceptors...)
	c.AnimalType.Intercept(interceptors...)
	c.Area.Intercept(interceptors...)
	c.Location.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
	c.VisitedLocation.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AnimalMutation:
		return c.Animal.mutate(ctx, m)
	case *AnimalTagMutation:
		return c.AnimalTag.mutate(ctx, m)
	case *AnimalTypeMutation:
		return c.AnimalType.mutate(ctx, m)
	case *AreaMutation:
		return c.Area.mutate(ctx, m)
	case *LocationMutation:
		return c.Location.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *VisitedLocationMutation:
		return c.VisitedLocation.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AnimalClient is a client for the Animal schema.
type AnimalClient struct {
	config
}

// NewAnimalClient returns a client for the Animal from the given config.
func NewAnimalClient(c config) *AnimalClient {
	return &AnimalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `animal.Hooks(f(g(h())))`.
func (c *AnimalClient) Use(hooks ...Hook) {
	c.hooks.Animal = append(c.hooks.Animal, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `animal.Intercept(f(g(h())))`.
func (c *AnimalClient) Intercept(interceptors ...Interceptor) {
	c.inters.Animal = append(c.inters.Animal, interceptors...)
}

// Create returns a builder for creating a Animal entity.
func (c *AnimalClient) Create() *AnimalCreate {
	mutation := newAnimalMutation(c.config, OpCreate)
	return &AnimalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Animal entities.
func (c *AnimalClient) CreateBulk(builders ...*AnimalCreate) *AnimalCreateBulk {
	return &AnimalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Animal.
func (c *AnimalClient) Update() *AnimalUpdate {
	mutation := newAnimalMutation(c.config, OpUpdate)
	return &AnimalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AnimalClient) UpdateOne(a *Animal) *AnimalUpdateOne {
	mutation := newAnimalMutation(c.config, OpUpdateOne, withAnimal(a))
	return &AnimalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AnimalClient) UpdateOneID(id uint64) *AnimalUpdateOne {
	mutation := newAnimalMutation(c.config, OpUpdateOne, withAnimalID(id))
	return &AnimalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Animal.
func (c *AnimalClient) Delete() *AnimalDelete {
	mutation := newAnimalMutation(c.config, OpDelete)
	return &AnimalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AnimalClient) DeleteOne(a *Animal) *AnimalDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AnimalClient) DeleteOneID(id uint64) *AnimalDeleteOne {
	builder := c.Delete().Where(animal.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AnimalDeleteOne{builder}
}

// Query returns a query builder for Animal.
func (c *AnimalClient) Query() *AnimalQuery {
	return &AnimalQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAnimal},
		inters: c.Interceptors(),
	}
}

// Get returns a Animal entity by its id.
func (c *AnimalClient) Get(ctx context.Context, id uint64) (*Animal, error) {
	return c.Query().Where(animal.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AnimalClient) GetX(ctx context.Context, id uint64) *Animal {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChipper queries the chipper edge of a Animal.
func (c *AnimalClient) QueryChipper(a *Animal) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(animal.Table, animal.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, animal.ChipperTable, animal.ChipperColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTypes queries the types edge of a Animal.
func (c *AnimalClient) QueryTypes(a *Animal) *AnimalTagQuery {
	query := (&AnimalTagClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(animal.Table, animal.FieldID, id),
			sqlgraph.To(animaltag.Table, animaltag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, animal.TypesTable, animal.TypesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChippingLocation queries the chipping_location edge of a Animal.
func (c *AnimalClient) QueryChippingLocation(a *Animal) *LocationQuery {
	query := (&LocationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(animal.Table, animal.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, animal.ChippingLocationTable, animal.ChippingLocationColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLocations queries the locations edge of a Animal.
func (c *AnimalClient) QueryLocations(a *Animal) *LocationQuery {
	query := (&LocationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(animal.Table, animal.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, animal.LocationsTable, animal.LocationsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAnimalTypes queries the animal_types edge of a Animal.
func (c *AnimalClient) QueryAnimalTypes(a *Animal) *AnimalTypeQuery {
	query := (&AnimalTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(animal.Table, animal.FieldID, id),
			sqlgraph.To(animaltype.Table, animaltype.AnimalsColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, animal.AnimalTypesTable, animal.AnimalTypesColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVisitedLocations queries the visited_locations edge of a Animal.
func (c *AnimalClient) QueryVisitedLocations(a *Animal) *VisitedLocationQuery {
	query := (&VisitedLocationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(animal.Table, animal.FieldID, id),
			sqlgraph.To(visitedlocation.Table, visitedlocation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, animal.VisitedLocationsTable, animal.VisitedLocationsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AnimalClient) Hooks() []Hook {
	return c.hooks.Animal
}

// Interceptors returns the client interceptors.
func (c *AnimalClient) Interceptors() []Interceptor {
	return c.inters.Animal
}

func (c *AnimalClient) mutate(ctx context.Context, m *AnimalMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AnimalCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AnimalUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AnimalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AnimalDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Animal mutation op: %q", m.Op())
	}
}

// AnimalTagClient is a client for the AnimalTag schema.
type AnimalTagClient struct {
	config
}

// NewAnimalTagClient returns a client for the AnimalTag from the given config.
func NewAnimalTagClient(c config) *AnimalTagClient {
	return &AnimalTagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `animaltag.Hooks(f(g(h())))`.
func (c *AnimalTagClient) Use(hooks ...Hook) {
	c.hooks.AnimalTag = append(c.hooks.AnimalTag, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `animaltag.Intercept(f(g(h())))`.
func (c *AnimalTagClient) Intercept(interceptors ...Interceptor) {
	c.inters.AnimalTag = append(c.inters.AnimalTag, interceptors...)
}

// Create returns a builder for creating a AnimalTag entity.
func (c *AnimalTagClient) Create() *AnimalTagCreate {
	mutation := newAnimalTagMutation(c.config, OpCreate)
	return &AnimalTagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AnimalTag entities.
func (c *AnimalTagClient) CreateBulk(builders ...*AnimalTagCreate) *AnimalTagCreateBulk {
	return &AnimalTagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AnimalTag.
func (c *AnimalTagClient) Update() *AnimalTagUpdate {
	mutation := newAnimalTagMutation(c.config, OpUpdate)
	return &AnimalTagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AnimalTagClient) UpdateOne(at *AnimalTag) *AnimalTagUpdateOne {
	mutation := newAnimalTagMutation(c.config, OpUpdateOne, withAnimalTag(at))
	return &AnimalTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AnimalTagClient) UpdateOneID(id uint64) *AnimalTagUpdateOne {
	mutation := newAnimalTagMutation(c.config, OpUpdateOne, withAnimalTagID(id))
	return &AnimalTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AnimalTag.
func (c *AnimalTagClient) Delete() *AnimalTagDelete {
	mutation := newAnimalTagMutation(c.config, OpDelete)
	return &AnimalTagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AnimalTagClient) DeleteOne(at *AnimalTag) *AnimalTagDeleteOne {
	return c.DeleteOneID(at.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AnimalTagClient) DeleteOneID(id uint64) *AnimalTagDeleteOne {
	builder := c.Delete().Where(animaltag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AnimalTagDeleteOne{builder}
}

// Query returns a query builder for AnimalTag.
func (c *AnimalTagClient) Query() *AnimalTagQuery {
	return &AnimalTagQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAnimalTag},
		inters: c.Interceptors(),
	}
}

// Get returns a AnimalTag entity by its id.
func (c *AnimalTagClient) Get(ctx context.Context, id uint64) (*AnimalTag, error) {
	return c.Query().Where(animaltag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AnimalTagClient) GetX(ctx context.Context, id uint64) *AnimalTag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAnimals queries the animals edge of a AnimalTag.
func (c *AnimalTagClient) QueryAnimals(at *AnimalTag) *AnimalQuery {
	query := (&AnimalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(animaltag.Table, animaltag.FieldID, id),
			sqlgraph.To(animal.Table, animal.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, animaltag.AnimalsTable, animaltag.AnimalsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAnimalTypes queries the animal_types edge of a AnimalTag.
func (c *AnimalTagClient) QueryAnimalTypes(at *AnimalTag) *AnimalTypeQuery {
	query := (&AnimalTypeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := at.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(animaltag.Table, animaltag.FieldID, id),
			sqlgraph.To(animaltype.Table, animaltype.TypesColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, animaltag.AnimalTypesTable, animaltag.AnimalTypesColumn),
		)
		fromV = sqlgraph.Neighbors(at.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AnimalTagClient) Hooks() []Hook {
	return c.hooks.AnimalTag
}

// Interceptors returns the client interceptors.
func (c *AnimalTagClient) Interceptors() []Interceptor {
	return c.inters.AnimalTag
}

func (c *AnimalTagClient) mutate(ctx context.Context, m *AnimalTagMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AnimalTagCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AnimalTagUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AnimalTagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AnimalTagDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AnimalTag mutation op: %q", m.Op())
	}
}

// AnimalTypeClient is a client for the AnimalType schema.
type AnimalTypeClient struct {
	config
}

// NewAnimalTypeClient returns a client for the AnimalType from the given config.
func NewAnimalTypeClient(c config) *AnimalTypeClient {
	return &AnimalTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `animaltype.Hooks(f(g(h())))`.
func (c *AnimalTypeClient) Use(hooks ...Hook) {
	c.hooks.AnimalType = append(c.hooks.AnimalType, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `animaltype.Intercept(f(g(h())))`.
func (c *AnimalTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.AnimalType = append(c.inters.AnimalType, interceptors...)
}

// Create returns a builder for creating a AnimalType entity.
func (c *AnimalTypeClient) Create() *AnimalTypeCreate {
	mutation := newAnimalTypeMutation(c.config, OpCreate)
	return &AnimalTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AnimalType entities.
func (c *AnimalTypeClient) CreateBulk(builders ...*AnimalTypeCreate) *AnimalTypeCreateBulk {
	return &AnimalTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AnimalType.
func (c *AnimalTypeClient) Update() *AnimalTypeUpdate {
	mutation := newAnimalTypeMutation(c.config, OpUpdate)
	return &AnimalTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AnimalTypeClient) UpdateOne(at *AnimalType) *AnimalTypeUpdateOne {
	mutation := newAnimalTypeMutation(c.config, OpUpdateOne)
	mutation.animals = &at.AnimalID
	mutation.types = &at.TypeID
	return &AnimalTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AnimalType.
func (c *AnimalTypeClient) Delete() *AnimalTypeDelete {
	mutation := newAnimalTypeMutation(c.config, OpDelete)
	return &AnimalTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for AnimalType.
func (c *AnimalTypeClient) Query() *AnimalTypeQuery {
	return &AnimalTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAnimalType},
		inters: c.Interceptors(),
	}
}

// QueryAnimals queries the animals edge of a AnimalType.
func (c *AnimalTypeClient) QueryAnimals(at *AnimalType) *AnimalQuery {
	return c.Query().
		Where(animaltype.AnimalID(at.AnimalID), animaltype.TypeID(at.TypeID)).
		QueryAnimals()
}

// QueryTypes queries the types edge of a AnimalType.
func (c *AnimalTypeClient) QueryTypes(at *AnimalType) *AnimalTagQuery {
	return c.Query().
		Where(animaltype.AnimalID(at.AnimalID), animaltype.TypeID(at.TypeID)).
		QueryTypes()
}

// Hooks returns the client hooks.
func (c *AnimalTypeClient) Hooks() []Hook {
	return c.hooks.AnimalType
}

// Interceptors returns the client interceptors.
func (c *AnimalTypeClient) Interceptors() []Interceptor {
	return c.inters.AnimalType
}

func (c *AnimalTypeClient) mutate(ctx context.Context, m *AnimalTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AnimalTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AnimalTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AnimalTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AnimalTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AnimalType mutation op: %q", m.Op())
	}
}

// AreaClient is a client for the Area schema.
type AreaClient struct {
	config
}

// NewAreaClient returns a client for the Area from the given config.
func NewAreaClient(c config) *AreaClient {
	return &AreaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `area.Hooks(f(g(h())))`.
func (c *AreaClient) Use(hooks ...Hook) {
	c.hooks.Area = append(c.hooks.Area, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `area.Intercept(f(g(h())))`.
func (c *AreaClient) Intercept(interceptors ...Interceptor) {
	c.inters.Area = append(c.inters.Area, interceptors...)
}

// Create returns a builder for creating a Area entity.
func (c *AreaClient) Create() *AreaCreate {
	mutation := newAreaMutation(c.config, OpCreate)
	return &AreaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Area entities.
func (c *AreaClient) CreateBulk(builders ...*AreaCreate) *AreaCreateBulk {
	return &AreaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Area.
func (c *AreaClient) Update() *AreaUpdate {
	mutation := newAreaMutation(c.config, OpUpdate)
	return &AreaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AreaClient) UpdateOne(a *Area) *AreaUpdateOne {
	mutation := newAreaMutation(c.config, OpUpdateOne, withArea(a))
	return &AreaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AreaClient) UpdateOneID(id uint64) *AreaUpdateOne {
	mutation := newAreaMutation(c.config, OpUpdateOne, withAreaID(id))
	return &AreaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Area.
func (c *AreaClient) Delete() *AreaDelete {
	mutation := newAreaMutation(c.config, OpDelete)
	return &AreaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AreaClient) DeleteOne(a *Area) *AreaDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AreaClient) DeleteOneID(id uint64) *AreaDeleteOne {
	builder := c.Delete().Where(area.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AreaDeleteOne{builder}
}

// Query returns a query builder for Area.
func (c *AreaClient) Query() *AreaQuery {
	return &AreaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeArea},
		inters: c.Interceptors(),
	}
}

// Get returns a Area entity by its id.
func (c *AreaClient) Get(ctx context.Context, id uint64) (*Area, error) {
	return c.Query().Where(area.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AreaClient) GetX(ctx context.Context, id uint64) *Area {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPoints queries the points edge of a Area.
func (c *AreaClient) QueryPoints(a *Area) *LocationQuery {
	query := (&LocationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(area.Table, area.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, area.PointsTable, area.PointsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AreaClient) Hooks() []Hook {
	return c.hooks.Area
}

// Interceptors returns the client interceptors.
func (c *AreaClient) Interceptors() []Interceptor {
	return c.inters.Area
}

func (c *AreaClient) mutate(ctx context.Context, m *AreaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AreaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AreaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AreaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AreaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Area mutation op: %q", m.Op())
	}
}

// LocationClient is a client for the Location schema.
type LocationClient struct {
	config
}

// NewLocationClient returns a client for the Location from the given config.
func NewLocationClient(c config) *LocationClient {
	return &LocationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `location.Hooks(f(g(h())))`.
func (c *LocationClient) Use(hooks ...Hook) {
	c.hooks.Location = append(c.hooks.Location, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `location.Intercept(f(g(h())))`.
func (c *LocationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Location = append(c.inters.Location, interceptors...)
}

// Create returns a builder for creating a Location entity.
func (c *LocationClient) Create() *LocationCreate {
	mutation := newLocationMutation(c.config, OpCreate)
	return &LocationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Location entities.
func (c *LocationClient) CreateBulk(builders ...*LocationCreate) *LocationCreateBulk {
	return &LocationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Location.
func (c *LocationClient) Update() *LocationUpdate {
	mutation := newLocationMutation(c.config, OpUpdate)
	return &LocationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LocationClient) UpdateOne(l *Location) *LocationUpdateOne {
	mutation := newLocationMutation(c.config, OpUpdateOne, withLocation(l))
	return &LocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LocationClient) UpdateOneID(id uint64) *LocationUpdateOne {
	mutation := newLocationMutation(c.config, OpUpdateOne, withLocationID(id))
	return &LocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Location.
func (c *LocationClient) Delete() *LocationDelete {
	mutation := newLocationMutation(c.config, OpDelete)
	return &LocationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LocationClient) DeleteOne(l *Location) *LocationDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LocationClient) DeleteOneID(id uint64) *LocationDeleteOne {
	builder := c.Delete().Where(location.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LocationDeleteOne{builder}
}

// Query returns a query builder for Location.
func (c *LocationClient) Query() *LocationQuery {
	return &LocationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLocation},
		inters: c.Interceptors(),
	}
}

// Get returns a Location entity by its id.
func (c *LocationClient) Get(ctx context.Context, id uint64) (*Location, error) {
	return c.Query().Where(location.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LocationClient) GetX(ctx context.Context, id uint64) *Location {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChippedAnimals queries the chipped_animals edge of a Location.
func (c *LocationClient) QueryChippedAnimals(l *Location) *AnimalQuery {
	query := (&AnimalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(animal.Table, animal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, location.ChippedAnimalsTable, location.ChippedAnimalsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAnimals queries the animals edge of a Location.
func (c *LocationClient) QueryAnimals(l *Location) *AnimalQuery {
	query := (&AnimalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(animal.Table, animal.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, location.AnimalsTable, location.AnimalsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAreas queries the areas edge of a Location.
func (c *LocationClient) QueryAreas(l *Location) *AreaQuery {
	query := (&AreaClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(area.Table, area.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, location.AreasTable, location.AreasPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHavingAnimals queries the having_animals edge of a Location.
func (c *LocationClient) QueryHavingAnimals(l *Location) *VisitedLocationQuery {
	query := (&VisitedLocationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(location.Table, location.FieldID, id),
			sqlgraph.To(visitedlocation.Table, visitedlocation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, location.HavingAnimalsTable, location.HavingAnimalsColumn),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LocationClient) Hooks() []Hook {
	return c.hooks.Location
}

// Interceptors returns the client interceptors.
func (c *LocationClient) Interceptors() []Interceptor {
	return c.inters.Location
}

func (c *LocationClient) mutate(ctx context.Context, m *LocationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LocationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LocationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LocationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Location mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uint32) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uint32) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uint32) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uint32) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAnimals queries the animals edge of a User.
func (c *UserClient) QueryAnimals(u *User) *AnimalQuery {
	query := (&AnimalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(animal.Table, animal.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AnimalsTable, user.AnimalsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// VisitedLocationClient is a client for the VisitedLocation schema.
type VisitedLocationClient struct {
	config
}

// NewVisitedLocationClient returns a client for the VisitedLocation from the given config.
func NewVisitedLocationClient(c config) *VisitedLocationClient {
	return &VisitedLocationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `visitedlocation.Hooks(f(g(h())))`.
func (c *VisitedLocationClient) Use(hooks ...Hook) {
	c.hooks.VisitedLocation = append(c.hooks.VisitedLocation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `visitedlocation.Intercept(f(g(h())))`.
func (c *VisitedLocationClient) Intercept(interceptors ...Interceptor) {
	c.inters.VisitedLocation = append(c.inters.VisitedLocation, interceptors...)
}

// Create returns a builder for creating a VisitedLocation entity.
func (c *VisitedLocationClient) Create() *VisitedLocationCreate {
	mutation := newVisitedLocationMutation(c.config, OpCreate)
	return &VisitedLocationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of VisitedLocation entities.
func (c *VisitedLocationClient) CreateBulk(builders ...*VisitedLocationCreate) *VisitedLocationCreateBulk {
	return &VisitedLocationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for VisitedLocation.
func (c *VisitedLocationClient) Update() *VisitedLocationUpdate {
	mutation := newVisitedLocationMutation(c.config, OpUpdate)
	return &VisitedLocationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VisitedLocationClient) UpdateOne(vl *VisitedLocation) *VisitedLocationUpdateOne {
	mutation := newVisitedLocationMutation(c.config, OpUpdateOne, withVisitedLocation(vl))
	return &VisitedLocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VisitedLocationClient) UpdateOneID(id uint64) *VisitedLocationUpdateOne {
	mutation := newVisitedLocationMutation(c.config, OpUpdateOne, withVisitedLocationID(id))
	return &VisitedLocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for VisitedLocation.
func (c *VisitedLocationClient) Delete() *VisitedLocationDelete {
	mutation := newVisitedLocationMutation(c.config, OpDelete)
	return &VisitedLocationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VisitedLocationClient) DeleteOne(vl *VisitedLocation) *VisitedLocationDeleteOne {
	return c.DeleteOneID(vl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VisitedLocationClient) DeleteOneID(id uint64) *VisitedLocationDeleteOne {
	builder := c.Delete().Where(visitedlocation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VisitedLocationDeleteOne{builder}
}

// Query returns a query builder for VisitedLocation.
func (c *VisitedLocationClient) Query() *VisitedLocationQuery {
	return &VisitedLocationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeVisitedLocation},
		inters: c.Interceptors(),
	}
}

// Get returns a VisitedLocation entity by its id.
func (c *VisitedLocationClient) Get(ctx context.Context, id uint64) (*VisitedLocation, error) {
	return c.Query().Where(visitedlocation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VisitedLocationClient) GetX(ctx context.Context, id uint64) *VisitedLocation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAnimals queries the animals edge of a VisitedLocation.
func (c *VisitedLocationClient) QueryAnimals(vl *VisitedLocation) *AnimalQuery {
	query := (&AnimalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := vl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(visitedlocation.Table, visitedlocation.FieldID, id),
			sqlgraph.To(animal.Table, animal.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, visitedlocation.AnimalsTable, visitedlocation.AnimalsColumn),
		)
		fromV = sqlgraph.Neighbors(vl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLocations queries the locations edge of a VisitedLocation.
func (c *VisitedLocationClient) QueryLocations(vl *VisitedLocation) *LocationQuery {
	query := (&LocationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := vl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(visitedlocation.Table, visitedlocation.FieldID, id),
			sqlgraph.To(location.Table, location.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, visitedlocation.LocationsTable, visitedlocation.LocationsColumn),
		)
		fromV = sqlgraph.Neighbors(vl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VisitedLocationClient) Hooks() []Hook {
	return c.hooks.VisitedLocation
}

// Interceptors returns the client interceptors.
func (c *VisitedLocationClient) Interceptors() []Interceptor {
	return c.inters.VisitedLocation
}

func (c *VisitedLocationClient) mutate(ctx context.Context, m *VisitedLocationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&VisitedLocationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&VisitedLocationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&VisitedLocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&VisitedLocationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown VisitedLocation mutation op: %q", m.Op())
	}
}
