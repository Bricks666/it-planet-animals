// Code generated by ent, DO NOT EDIT.

package visitedlocation

import (
	"animals/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldLTE(FieldID, id))
}

// AnimalID applies equality check predicate on the "animal_id" field. It's identical to AnimalIDEQ.
func AnimalID(v uint64) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldEQ(FieldAnimalID, v))
}

// LocationID applies equality check predicate on the "location_id" field. It's identical to LocationIDEQ.
func LocationID(v uint64) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldEQ(FieldLocationID, v))
}

// DateTimeOfVisitLocationPoint applies equality check predicate on the "date_time_of_visit_location_point" field. It's identical to DateTimeOfVisitLocationPointEQ.
func DateTimeOfVisitLocationPoint(v time.Time) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldEQ(FieldDateTimeOfVisitLocationPoint, v))
}

// AnimalIDEQ applies the EQ predicate on the "animal_id" field.
func AnimalIDEQ(v uint64) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldEQ(FieldAnimalID, v))
}

// AnimalIDNEQ applies the NEQ predicate on the "animal_id" field.
func AnimalIDNEQ(v uint64) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldNEQ(FieldAnimalID, v))
}

// AnimalIDIn applies the In predicate on the "animal_id" field.
func AnimalIDIn(vs ...uint64) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldIn(FieldAnimalID, vs...))
}

// AnimalIDNotIn applies the NotIn predicate on the "animal_id" field.
func AnimalIDNotIn(vs ...uint64) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldNotIn(FieldAnimalID, vs...))
}

// LocationIDEQ applies the EQ predicate on the "location_id" field.
func LocationIDEQ(v uint64) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldEQ(FieldLocationID, v))
}

// LocationIDNEQ applies the NEQ predicate on the "location_id" field.
func LocationIDNEQ(v uint64) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldNEQ(FieldLocationID, v))
}

// LocationIDIn applies the In predicate on the "location_id" field.
func LocationIDIn(vs ...uint64) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldIn(FieldLocationID, vs...))
}

// LocationIDNotIn applies the NotIn predicate on the "location_id" field.
func LocationIDNotIn(vs ...uint64) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldNotIn(FieldLocationID, vs...))
}

// DateTimeOfVisitLocationPointEQ applies the EQ predicate on the "date_time_of_visit_location_point" field.
func DateTimeOfVisitLocationPointEQ(v time.Time) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldEQ(FieldDateTimeOfVisitLocationPoint, v))
}

// DateTimeOfVisitLocationPointNEQ applies the NEQ predicate on the "date_time_of_visit_location_point" field.
func DateTimeOfVisitLocationPointNEQ(v time.Time) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldNEQ(FieldDateTimeOfVisitLocationPoint, v))
}

// DateTimeOfVisitLocationPointIn applies the In predicate on the "date_time_of_visit_location_point" field.
func DateTimeOfVisitLocationPointIn(vs ...time.Time) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldIn(FieldDateTimeOfVisitLocationPoint, vs...))
}

// DateTimeOfVisitLocationPointNotIn applies the NotIn predicate on the "date_time_of_visit_location_point" field.
func DateTimeOfVisitLocationPointNotIn(vs ...time.Time) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldNotIn(FieldDateTimeOfVisitLocationPoint, vs...))
}

// DateTimeOfVisitLocationPointGT applies the GT predicate on the "date_time_of_visit_location_point" field.
func DateTimeOfVisitLocationPointGT(v time.Time) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldGT(FieldDateTimeOfVisitLocationPoint, v))
}

// DateTimeOfVisitLocationPointGTE applies the GTE predicate on the "date_time_of_visit_location_point" field.
func DateTimeOfVisitLocationPointGTE(v time.Time) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldGTE(FieldDateTimeOfVisitLocationPoint, v))
}

// DateTimeOfVisitLocationPointLT applies the LT predicate on the "date_time_of_visit_location_point" field.
func DateTimeOfVisitLocationPointLT(v time.Time) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldLT(FieldDateTimeOfVisitLocationPoint, v))
}

// DateTimeOfVisitLocationPointLTE applies the LTE predicate on the "date_time_of_visit_location_point" field.
func DateTimeOfVisitLocationPointLTE(v time.Time) predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldLTE(FieldDateTimeOfVisitLocationPoint, v))
}

// DateTimeOfVisitLocationPointIsNil applies the IsNil predicate on the "date_time_of_visit_location_point" field.
func DateTimeOfVisitLocationPointIsNil() predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldIsNull(FieldDateTimeOfVisitLocationPoint))
}

// DateTimeOfVisitLocationPointNotNil applies the NotNil predicate on the "date_time_of_visit_location_point" field.
func DateTimeOfVisitLocationPointNotNil() predicate.VisitedLocation {
	return predicate.VisitedLocation(sql.FieldNotNull(FieldDateTimeOfVisitLocationPoint))
}

// HasAnimals applies the HasEdge predicate on the "animals" edge.
func HasAnimals() predicate.VisitedLocation {
	return predicate.VisitedLocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AnimalsTable, AnimalsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnimalsWith applies the HasEdge predicate on the "animals" edge with a given conditions (other predicates).
func HasAnimalsWith(preds ...predicate.Animal) predicate.VisitedLocation {
	return predicate.VisitedLocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AnimalsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AnimalsTable, AnimalsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasLocations applies the HasEdge predicate on the "locations" edge.
func HasLocations() predicate.VisitedLocation {
	return predicate.VisitedLocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, LocationsTable, LocationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLocationsWith applies the HasEdge predicate on the "locations" edge with a given conditions (other predicates).
func HasLocationsWith(preds ...predicate.Location) predicate.VisitedLocation {
	return predicate.VisitedLocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(LocationsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, LocationsTable, LocationsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VisitedLocation) predicate.VisitedLocation {
	return predicate.VisitedLocation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VisitedLocation) predicate.VisitedLocation {
	return predicate.VisitedLocation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VisitedLocation) predicate.VisitedLocation {
	return predicate.VisitedLocation(func(s *sql.Selector) {
		p(s.Not())
	})
}
