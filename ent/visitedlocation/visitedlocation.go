// Code generated by ent, DO NOT EDIT.

package visitedlocation

const (
	// Label holds the string label denoting the visitedlocation type in the database.
	Label = "visited_location"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAnimalID holds the string denoting the animal_id field in the database.
	FieldAnimalID = "animal_id"
	// FieldLocationID holds the string denoting the location_id field in the database.
	FieldLocationID = "location_id"
	// FieldDateTimeOfVisitLocationPoint holds the string denoting the date_time_of_visit_location_point field in the database.
	FieldDateTimeOfVisitLocationPoint = "date_time_of_visit_location_point"
	// EdgeAnimals holds the string denoting the animals edge name in mutations.
	EdgeAnimals = "animals"
	// EdgeLocations holds the string denoting the locations edge name in mutations.
	EdgeLocations = "locations"
	// Table holds the table name of the visitedlocation in the database.
	Table = "visited_locations"
	// AnimalsTable is the table that holds the animals relation/edge.
	AnimalsTable = "visited_locations"
	// AnimalsInverseTable is the table name for the Animal entity.
	// It exists in this package in order to avoid circular dependency with the "animal" package.
	AnimalsInverseTable = "animals"
	// AnimalsColumn is the table column denoting the animals relation/edge.
	AnimalsColumn = "animal_id"
	// LocationsTable is the table that holds the locations relation/edge.
	LocationsTable = "visited_locations"
	// LocationsInverseTable is the table name for the Location entity.
	// It exists in this package in order to avoid circular dependency with the "location" package.
	LocationsInverseTable = "locations"
	// LocationsColumn is the table column denoting the locations relation/edge.
	LocationsColumn = "location_id"
)

// Columns holds all SQL columns for visitedlocation fields.
var Columns = []string{
	FieldID,
	FieldAnimalID,
	FieldLocationID,
	FieldDateTimeOfVisitLocationPoint,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(uint64) error
)
