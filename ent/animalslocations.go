// Code generated by ent, DO NOT EDIT.

package ent

import (
	"animals/ent/animal"
	"animals/ent/animalslocations"
	"animals/ent/location"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// AnimalsLocations is the model entity for the AnimalsLocations schema.
type AnimalsLocations struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// AnimalId holds the value of the "animalId" field.
	AnimalId uint64 `json:"animalId,omitempty"`
	// LocationId holds the value of the "locationId" field.
	LocationId uint64 `json:"locationId,omitempty"`
	// DateTimeOfVisitLocationPoint holds the value of the "dateTimeOfVisitLocationPoint" field.
	DateTimeOfVisitLocationPoint time.Time `json:"dateTimeOfVisitLocationPoint,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AnimalsLocationsQuery when eager-loading is set.
	Edges AnimalsLocationsEdges `json:"edges"`
}

// AnimalsLocationsEdges holds the relations/edges for other nodes in the graph.
type AnimalsLocationsEdges struct {
	// AnimalsLocationsAnimal holds the value of the animals_locations_animal edge.
	AnimalsLocationsAnimal *Animal `json:"animals_locations_animal,omitempty"`
	// AnimalsLocationsLocation holds the value of the animals_locations_location edge.
	AnimalsLocationsLocation *Location `json:"animals_locations_location,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AnimalsLocationsAnimalOrErr returns the AnimalsLocationsAnimal value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AnimalsLocationsEdges) AnimalsLocationsAnimalOrErr() (*Animal, error) {
	if e.loadedTypes[0] {
		if e.AnimalsLocationsAnimal == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: animal.Label}
		}
		return e.AnimalsLocationsAnimal, nil
	}
	return nil, &NotLoadedError{edge: "animals_locations_animal"}
}

// AnimalsLocationsLocationOrErr returns the AnimalsLocationsLocation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AnimalsLocationsEdges) AnimalsLocationsLocationOrErr() (*Location, error) {
	if e.loadedTypes[1] {
		if e.AnimalsLocationsLocation == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: location.Label}
		}
		return e.AnimalsLocationsLocation, nil
	}
	return nil, &NotLoadedError{edge: "animals_locations_location"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AnimalsLocations) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case animalslocations.FieldID, animalslocations.FieldAnimalId, animalslocations.FieldLocationId:
			values[i] = new(sql.NullInt64)
		case animalslocations.FieldDateTimeOfVisitLocationPoint:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AnimalsLocations", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AnimalsLocations fields.
func (al *AnimalsLocations) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case animalslocations.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			al.ID = uint64(value.Int64)
		case animalslocations.FieldAnimalId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field animalId", values[i])
			} else if value.Valid {
				al.AnimalId = uint64(value.Int64)
			}
		case animalslocations.FieldLocationId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field locationId", values[i])
			} else if value.Valid {
				al.LocationId = uint64(value.Int64)
			}
		case animalslocations.FieldDateTimeOfVisitLocationPoint:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dateTimeOfVisitLocationPoint", values[i])
			} else if value.Valid {
				al.DateTimeOfVisitLocationPoint = value.Time
			}
		}
	}
	return nil
}

// QueryAnimalsLocationsAnimal queries the "animals_locations_animal" edge of the AnimalsLocations entity.
func (al *AnimalsLocations) QueryAnimalsLocationsAnimal() *AnimalQuery {
	return NewAnimalsLocationsClient(al.config).QueryAnimalsLocationsAnimal(al)
}

// QueryAnimalsLocationsLocation queries the "animals_locations_location" edge of the AnimalsLocations entity.
func (al *AnimalsLocations) QueryAnimalsLocationsLocation() *LocationQuery {
	return NewAnimalsLocationsClient(al.config).QueryAnimalsLocationsLocation(al)
}

// Update returns a builder for updating this AnimalsLocations.
// Note that you need to call AnimalsLocations.Unwrap() before calling this method if this AnimalsLocations
// was returned from a transaction, and the transaction was committed or rolled back.
func (al *AnimalsLocations) Update() *AnimalsLocationsUpdateOne {
	return NewAnimalsLocationsClient(al.config).UpdateOne(al)
}

// Unwrap unwraps the AnimalsLocations entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (al *AnimalsLocations) Unwrap() *AnimalsLocations {
	_tx, ok := al.config.driver.(*txDriver)
	if !ok {
		panic("ent: AnimalsLocations is not a transactional entity")
	}
	al.config.driver = _tx.drv
	return al
}

// String implements the fmt.Stringer.
func (al *AnimalsLocations) String() string {
	var builder strings.Builder
	builder.WriteString("AnimalsLocations(")
	builder.WriteString(fmt.Sprintf("id=%v, ", al.ID))
	builder.WriteString("animalId=")
	builder.WriteString(fmt.Sprintf("%v", al.AnimalId))
	builder.WriteString(", ")
	builder.WriteString("locationId=")
	builder.WriteString(fmt.Sprintf("%v", al.LocationId))
	builder.WriteString(", ")
	builder.WriteString("dateTimeOfVisitLocationPoint=")
	builder.WriteString(al.DateTimeOfVisitLocationPoint.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AnimalsLocationsSlice is a parsable slice of AnimalsLocations.
type AnimalsLocationsSlice []*AnimalsLocations
