// Code generated by ent, DO NOT EDIT.

package ent

import (
	"animals/ent/animal"
	"animals/ent/location"
	"animals/ent/predicate"
	"animals/ent/visitedlocation"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VisitedLocationUpdate is the builder for updating VisitedLocation entities.
type VisitedLocationUpdate struct {
	config
	hooks    []Hook
	mutation *VisitedLocationMutation
}

// Where appends a list predicates to the VisitedLocationUpdate builder.
func (vlu *VisitedLocationUpdate) Where(ps ...predicate.VisitedLocation) *VisitedLocationUpdate {
	vlu.mutation.Where(ps...)
	return vlu
}

// SetAnimalID sets the "animal_id" field.
func (vlu *VisitedLocationUpdate) SetAnimalID(u uint64) *VisitedLocationUpdate {
	vlu.mutation.SetAnimalID(u)
	return vlu
}

// SetLocationID sets the "location_id" field.
func (vlu *VisitedLocationUpdate) SetLocationID(u uint64) *VisitedLocationUpdate {
	vlu.mutation.SetLocationID(u)
	return vlu
}

// SetDateTimeOfVisitLocationPoint sets the "date_time_of_visit_location_point" field.
func (vlu *VisitedLocationUpdate) SetDateTimeOfVisitLocationPoint(t time.Time) *VisitedLocationUpdate {
	vlu.mutation.SetDateTimeOfVisitLocationPoint(t)
	return vlu
}

// SetNillableDateTimeOfVisitLocationPoint sets the "date_time_of_visit_location_point" field if the given value is not nil.
func (vlu *VisitedLocationUpdate) SetNillableDateTimeOfVisitLocationPoint(t *time.Time) *VisitedLocationUpdate {
	if t != nil {
		vlu.SetDateTimeOfVisitLocationPoint(*t)
	}
	return vlu
}

// ClearDateTimeOfVisitLocationPoint clears the value of the "date_time_of_visit_location_point" field.
func (vlu *VisitedLocationUpdate) ClearDateTimeOfVisitLocationPoint() *VisitedLocationUpdate {
	vlu.mutation.ClearDateTimeOfVisitLocationPoint()
	return vlu
}

// SetAnimalsID sets the "animals" edge to the Animal entity by ID.
func (vlu *VisitedLocationUpdate) SetAnimalsID(id uint64) *VisitedLocationUpdate {
	vlu.mutation.SetAnimalsID(id)
	return vlu
}

// SetAnimals sets the "animals" edge to the Animal entity.
func (vlu *VisitedLocationUpdate) SetAnimals(a *Animal) *VisitedLocationUpdate {
	return vlu.SetAnimalsID(a.ID)
}

// SetLocationsID sets the "locations" edge to the Location entity by ID.
func (vlu *VisitedLocationUpdate) SetLocationsID(id uint64) *VisitedLocationUpdate {
	vlu.mutation.SetLocationsID(id)
	return vlu
}

// SetLocations sets the "locations" edge to the Location entity.
func (vlu *VisitedLocationUpdate) SetLocations(l *Location) *VisitedLocationUpdate {
	return vlu.SetLocationsID(l.ID)
}

// Mutation returns the VisitedLocationMutation object of the builder.
func (vlu *VisitedLocationUpdate) Mutation() *VisitedLocationMutation {
	return vlu.mutation
}

// ClearAnimals clears the "animals" edge to the Animal entity.
func (vlu *VisitedLocationUpdate) ClearAnimals() *VisitedLocationUpdate {
	vlu.mutation.ClearAnimals()
	return vlu
}

// ClearLocations clears the "locations" edge to the Location entity.
func (vlu *VisitedLocationUpdate) ClearLocations() *VisitedLocationUpdate {
	vlu.mutation.ClearLocations()
	return vlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vlu *VisitedLocationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, VisitedLocationMutation](ctx, vlu.sqlSave, vlu.mutation, vlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vlu *VisitedLocationUpdate) SaveX(ctx context.Context) int {
	affected, err := vlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vlu *VisitedLocationUpdate) Exec(ctx context.Context) error {
	_, err := vlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vlu *VisitedLocationUpdate) ExecX(ctx context.Context) {
	if err := vlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vlu *VisitedLocationUpdate) check() error {
	if _, ok := vlu.mutation.AnimalsID(); vlu.mutation.AnimalsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VisitedLocation.animals"`)
	}
	if _, ok := vlu.mutation.LocationsID(); vlu.mutation.LocationsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VisitedLocation.locations"`)
	}
	return nil
}

func (vlu *VisitedLocationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(visitedlocation.Table, visitedlocation.Columns, sqlgraph.NewFieldSpec(visitedlocation.FieldID, field.TypeUint64))
	if ps := vlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vlu.mutation.DateTimeOfVisitLocationPoint(); ok {
		_spec.SetField(visitedlocation.FieldDateTimeOfVisitLocationPoint, field.TypeTime, value)
	}
	if vlu.mutation.DateTimeOfVisitLocationPointCleared() {
		_spec.ClearField(visitedlocation.FieldDateTimeOfVisitLocationPoint, field.TypeTime)
	}
	if vlu.mutation.AnimalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   visitedlocation.AnimalsTable,
			Columns: []string{visitedlocation.AnimalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: animal.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vlu.mutation.AnimalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   visitedlocation.AnimalsTable,
			Columns: []string{visitedlocation.AnimalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: animal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vlu.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   visitedlocation.LocationsTable,
			Columns: []string{visitedlocation.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: location.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vlu.mutation.LocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   visitedlocation.LocationsTable,
			Columns: []string{visitedlocation.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: location.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{visitedlocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vlu.mutation.done = true
	return n, nil
}

// VisitedLocationUpdateOne is the builder for updating a single VisitedLocation entity.
type VisitedLocationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VisitedLocationMutation
}

// SetAnimalID sets the "animal_id" field.
func (vluo *VisitedLocationUpdateOne) SetAnimalID(u uint64) *VisitedLocationUpdateOne {
	vluo.mutation.SetAnimalID(u)
	return vluo
}

// SetLocationID sets the "location_id" field.
func (vluo *VisitedLocationUpdateOne) SetLocationID(u uint64) *VisitedLocationUpdateOne {
	vluo.mutation.SetLocationID(u)
	return vluo
}

// SetDateTimeOfVisitLocationPoint sets the "date_time_of_visit_location_point" field.
func (vluo *VisitedLocationUpdateOne) SetDateTimeOfVisitLocationPoint(t time.Time) *VisitedLocationUpdateOne {
	vluo.mutation.SetDateTimeOfVisitLocationPoint(t)
	return vluo
}

// SetNillableDateTimeOfVisitLocationPoint sets the "date_time_of_visit_location_point" field if the given value is not nil.
func (vluo *VisitedLocationUpdateOne) SetNillableDateTimeOfVisitLocationPoint(t *time.Time) *VisitedLocationUpdateOne {
	if t != nil {
		vluo.SetDateTimeOfVisitLocationPoint(*t)
	}
	return vluo
}

// ClearDateTimeOfVisitLocationPoint clears the value of the "date_time_of_visit_location_point" field.
func (vluo *VisitedLocationUpdateOne) ClearDateTimeOfVisitLocationPoint() *VisitedLocationUpdateOne {
	vluo.mutation.ClearDateTimeOfVisitLocationPoint()
	return vluo
}

// SetAnimalsID sets the "animals" edge to the Animal entity by ID.
func (vluo *VisitedLocationUpdateOne) SetAnimalsID(id uint64) *VisitedLocationUpdateOne {
	vluo.mutation.SetAnimalsID(id)
	return vluo
}

// SetAnimals sets the "animals" edge to the Animal entity.
func (vluo *VisitedLocationUpdateOne) SetAnimals(a *Animal) *VisitedLocationUpdateOne {
	return vluo.SetAnimalsID(a.ID)
}

// SetLocationsID sets the "locations" edge to the Location entity by ID.
func (vluo *VisitedLocationUpdateOne) SetLocationsID(id uint64) *VisitedLocationUpdateOne {
	vluo.mutation.SetLocationsID(id)
	return vluo
}

// SetLocations sets the "locations" edge to the Location entity.
func (vluo *VisitedLocationUpdateOne) SetLocations(l *Location) *VisitedLocationUpdateOne {
	return vluo.SetLocationsID(l.ID)
}

// Mutation returns the VisitedLocationMutation object of the builder.
func (vluo *VisitedLocationUpdateOne) Mutation() *VisitedLocationMutation {
	return vluo.mutation
}

// ClearAnimals clears the "animals" edge to the Animal entity.
func (vluo *VisitedLocationUpdateOne) ClearAnimals() *VisitedLocationUpdateOne {
	vluo.mutation.ClearAnimals()
	return vluo
}

// ClearLocations clears the "locations" edge to the Location entity.
func (vluo *VisitedLocationUpdateOne) ClearLocations() *VisitedLocationUpdateOne {
	vluo.mutation.ClearLocations()
	return vluo
}

// Where appends a list predicates to the VisitedLocationUpdate builder.
func (vluo *VisitedLocationUpdateOne) Where(ps ...predicate.VisitedLocation) *VisitedLocationUpdateOne {
	vluo.mutation.Where(ps...)
	return vluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vluo *VisitedLocationUpdateOne) Select(field string, fields ...string) *VisitedLocationUpdateOne {
	vluo.fields = append([]string{field}, fields...)
	return vluo
}

// Save executes the query and returns the updated VisitedLocation entity.
func (vluo *VisitedLocationUpdateOne) Save(ctx context.Context) (*VisitedLocation, error) {
	return withHooks[*VisitedLocation, VisitedLocationMutation](ctx, vluo.sqlSave, vluo.mutation, vluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vluo *VisitedLocationUpdateOne) SaveX(ctx context.Context) *VisitedLocation {
	node, err := vluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vluo *VisitedLocationUpdateOne) Exec(ctx context.Context) error {
	_, err := vluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vluo *VisitedLocationUpdateOne) ExecX(ctx context.Context) {
	if err := vluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vluo *VisitedLocationUpdateOne) check() error {
	if _, ok := vluo.mutation.AnimalsID(); vluo.mutation.AnimalsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VisitedLocation.animals"`)
	}
	if _, ok := vluo.mutation.LocationsID(); vluo.mutation.LocationsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "VisitedLocation.locations"`)
	}
	return nil
}

func (vluo *VisitedLocationUpdateOne) sqlSave(ctx context.Context) (_node *VisitedLocation, err error) {
	if err := vluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(visitedlocation.Table, visitedlocation.Columns, sqlgraph.NewFieldSpec(visitedlocation.FieldID, field.TypeUint64))
	id, ok := vluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VisitedLocation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, visitedlocation.FieldID)
		for _, f := range fields {
			if !visitedlocation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != visitedlocation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vluo.mutation.DateTimeOfVisitLocationPoint(); ok {
		_spec.SetField(visitedlocation.FieldDateTimeOfVisitLocationPoint, field.TypeTime, value)
	}
	if vluo.mutation.DateTimeOfVisitLocationPointCleared() {
		_spec.ClearField(visitedlocation.FieldDateTimeOfVisitLocationPoint, field.TypeTime)
	}
	if vluo.mutation.AnimalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   visitedlocation.AnimalsTable,
			Columns: []string{visitedlocation.AnimalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: animal.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vluo.mutation.AnimalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   visitedlocation.AnimalsTable,
			Columns: []string{visitedlocation.AnimalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: animal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vluo.mutation.LocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   visitedlocation.LocationsTable,
			Columns: []string{visitedlocation.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: location.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vluo.mutation.LocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   visitedlocation.LocationsTable,
			Columns: []string{visitedlocation.LocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: location.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &VisitedLocation{config: vluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{visitedlocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vluo.mutation.done = true
	return _node, nil
}
